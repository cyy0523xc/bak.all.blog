{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":true},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":true},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":true},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":true},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":true},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":true},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":true},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":true},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":true},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":true},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":true},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":true},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":true},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":true},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":true},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":true},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":true},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":true},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":true},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":true},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":true},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":true},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":true},{"_id":"themes/phase/source/js/gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes/phase/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes/phase/source/js/phasebeam.js","path":"js/phasebeam.js","modified":false},{"_id":"themes/phase/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/phase/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/phase/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/phase/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/phase/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/phase/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/phase/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/phase/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":false},{"_id":"themes/phase/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":false},{"_id":"themes/phase/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/phase/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":false},{"_id":"themes/phase/source/css/images/facebook.png","path":"css/images/facebook.png","modified":false},{"_id":"themes/phase/source/css/images/github.png","path":"css/images/github.png","modified":false},{"_id":"themes/phase/source/css/images/google.png","path":"css/images/google.png","modified":false},{"_id":"themes/phase/source/css/images/rss.png","path":"css/images/rss.png","modified":false},{"_id":"themes/phase/source/css/images/twitter.png","path":"css/images/twitter.png","modified":false},{"_id":"source/images/vim-powerline效果.jpg","path":"images/vim-powerline效果.jpg","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1410923334000},{"_id":"scaffolds/page.md","mtime":1410923334000},{"_id":"scaffolds/photo.md","mtime":1410923334000},{"_id":"scaffolds/post.md","mtime":1410935677000},{"_id":"source/_posts/hexo记录.md","mtime":1411116093000},{"_id":"source/about/index.md","mtime":1410920287000},{"_id":"themes/landscape/README.md","mtime":1410923334000},{"_id":"themes/landscape/Gruntfile.js","mtime":1410923334000},{"_id":"themes/landscape/LICENSE","mtime":1410923334000},{"_id":"themes/landscape/_config.yml","mtime":1410923334000},{"_id":"themes/landscape/package.json","mtime":1410923334000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1410923334000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/category.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/index.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/page.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/post.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1410923334000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1410923335000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1410923335000},{"_id":"themes/landscape/source/js/script.js","mtime":1410923335000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/style.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1410923335000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1410923335000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1410923335000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1410923335000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1410923335000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1410923335000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1410923335000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1410923335000},{"_id":"themes/phase/_config.yml","mtime":1410404792000},{"_id":"themes/phase/LICENSE","mtime":1410331626000},{"_id":"themes/phase/README.md","mtime":1410331626000},{"_id":"themes/phase/languages/default.yml","mtime":1410331626000},{"_id":"themes/phase/languages/zh-CN.yml","mtime":1410340077000},{"_id":"themes/phase/languages/zh-TW.yml","mtime":1410331626000},{"_id":"themes/phase/layout/archive.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/category.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/index.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/layout.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/page.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/post.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/tag.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/after_footer.ejs","mtime":1410406463000},{"_id":"themes/phase/layout/_partial/archive.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/article.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/comment.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/footer.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/google_analytics.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/head.ejs","mtime":1411115611000},{"_id":"themes/phase/layout/_partial/header.ejs","mtime":1410403529000},{"_id":"themes/phase/layout/_partial/pagination.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/phasebeam.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/category.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/date.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/gallery.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/share.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/tag.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/taxonomy.ejs","mtime":1410331626000},{"_id":"themes/phase/layout/_partial/post/title.ejs","mtime":1410331626000},{"_id":"themes/phase/source/js/gallery.js","mtime":1410331626000},{"_id":"themes/phase/source/js/jquery.imagesloaded.min.js","mtime":1410331626000},{"_id":"themes/phase/source/js/phasebeam.js","mtime":1410331626000},{"_id":"themes/phase/source/fancybox/blank.gif","mtime":1410331626000},{"_id":"themes/phase/source/fancybox/fancybox_loading.gif","mtime":1410331626000},{"_id":"themes/phase/source/fancybox/fancybox_overlay.png","mtime":1410331626000},{"_id":"themes/phase/source/fancybox/fancybox_sprite.png","mtime":1410331626000},{"_id":"themes/phase/source/fancybox/jquery.fancybox.css","mtime":1410331626000},{"_id":"themes/phase/source/fancybox/jquery.fancybox.pack.js","mtime":1410331626000},{"_id":"themes/phase/source/css/style.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_base/layout.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_base/utils.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_base/variable.styl","mtime":1410340613000},{"_id":"themes/phase/source/css/_partial/archive.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_partial/article.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_partial/comment.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_partial/footer.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_partial/header.styl","mtime":1410403866000},{"_id":"themes/phase/source/css/_partial/pagination.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_partial/phasebeam.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/_partial/syntax.styl","mtime":1410331626000},{"_id":"themes/phase/source/css/font/fontawesome-webfont.eot","mtime":1410331626000},{"_id":"themes/phase/source/css/font/fontawesome-webfont.svg","mtime":1410331626000},{"_id":"themes/phase/source/css/font/fontawesome-webfont.ttf","mtime":1410331626000},{"_id":"themes/phase/source/css/font/fontawesome-webfont.woff","mtime":1410331626000},{"_id":"themes/phase/source/css/images/facebook.png","mtime":1410331626000},{"_id":"themes/phase/source/css/images/github.png","mtime":1410331626000},{"_id":"themes/phase/source/css/images/google.png","mtime":1410331626000},{"_id":"themes/phase/source/css/images/rss.png","mtime":1410331626000},{"_id":"themes/phase/source/css/images/twitter.png","mtime":1410331626000},{"_id":"source/_posts/失控：石头是进化缓慢的生命.md","mtime":1411028960000},{"_id":"source/_posts/BlueKai模式研究.md","mtime":1411098869000},{"_id":"source/_posts/ElasticSearch问题汇聚.md","mtime":1411098869000},{"_id":"source/_posts/big-data-enterprice-finance.md","mtime":1411098869000},{"_id":"source/_posts/移动广告数据挖掘.md","mtime":1411098869000},{"_id":"themes/phase/layout/_partial/mathjax.ejs~","mtime":1411115739000},{"_id":"themes/phase/layout/_partial/mathjax.ejs","mtime":1411115739000},{"_id":"source/images/vim-powerline效果.jpg","mtime":1411544240000},{"_id":"source/_posts/R/R中vector和names函数.md","mtime":1411873728000},{"_id":"source/_posts/R/R对数组指定下标顺序输出.md","mtime":1411873728000},{"_id":"source/_posts/R/R语言的小技巧.md","mtime":1411873728000},{"_id":"source/_posts/R/function.apply.md","mtime":1411873728000},{"_id":"source/_posts/R/function.lapply.md","mtime":1411873728000},{"_id":"source/_posts/R/function.tapply.md","mtime":1411873728000},{"_id":"source/_posts/R/r编码规范.md","mtime":1411873728000},{"_id":"source/_posts/R/r资源列表.md","mtime":1411873728000},{"_id":"source/_posts/R/一段R程序的优化.md","mtime":1411873728000},{"_id":"source/_posts/R/使用R来获取网易公开课的下载地址.md","mtime":1411873728000},{"_id":"source/_posts/php/在PHP中近似实现AOP思想.md","mtime":1411873728000},{"_id":"source/_posts/shell/rsync命令.md","mtime":1411873728000},{"_id":"source/_posts/shell/sed命令.md","mtime":1411873728000},{"_id":"source/_posts/shell/shell命令自动补全.md","mtime":1411873728000},{"_id":"source/_posts/shell/shell记录.md","mtime":1411873728000},{"_id":"source/_posts/vim/vimscript问题汇总.md","mtime":1411873728000},{"_id":"source/_posts/vim/vim中替换-M符号.md","mtime":1411873728000},{"_id":"source/_posts/vim/vim命令汇总.md","mtime":1411873728000},{"_id":"source/_posts/vim/vim插件.md","mtime":1411873728000},{"_id":"source/_posts/vim/vim的模式.md","mtime":1411873728000},{"_id":"source/_posts/vim/vim脚本vimscript.md","mtime":1411873728000},{"_id":"source/_posts/javascript/Greasemonkey脚本开发.md","mtime":1411958332000},{"_id":"source/_posts/javascript/javascript的promise模式.md","mtime":1411958332000},{"_id":"source/_posts/shell/shell-export及执行环境.md","mtime":1411958332000}],"Category":[{"name":"日常记录","_id":"esbk2tzy7kglbhy7","posts":[]},{"name":"Record","_id":"0hn0a2wtbncuuk27","posts":["1aoi1lvf95he3744"]},{"name":"record","_id":"mcqjzjczsmtmxrv7","posts":["l2xjfk9rjtu1twpt","zidfpcdzj5ox3w0u","buwyf1mm4zo8z87c"]},{"name":"javascript","_id":"bre7hyxaoyppdbph","posts":["c9yr6ge2nkg8q26s"]},{"name":"shell","_id":"dv2ergd6wevfqlw0","posts":["z8bs0pniypbmhqgo"]}],"Page":[{"title":"About Me","date":1410919839000,"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">做自己喜欢的事，</div><div class=\"line\">走自己喜欢的路。</div><div class=\"line\"> </div><div class=\"line\">一种追求：</div><div class=\"line\">  喂马，</div><div class=\"line\">  劈柴，</div><div class=\"line\">  周游世界。</div><div class=\"line\"></div><div class=\"line\">一种境界：</div><div class=\"line\">  小桥流水人家。</div></pre></td></tr></table></figure>\n\n<p>联系我：</p>\n<ul>\n<li>微博：<a href=\"http://weibo.com/caiyingyao\" target=\"_blank\" rel=\"external\">数据明月</a></li>\n</ul>\n","source":"about/index.md","raw":"title: About Me\ndate: 2014-09-17 10:10:39\n---\n\n```\n做自己喜欢的事，\n走自己喜欢的路。\n \n一种追求：\n  喂马，\n  劈柴，\n  周游世界。\n\n一种境界：\n  小桥流水人家。\n```\n\n联系我：\n\n- 微博：[数据明月](http://weibo.com/caiyingyao)\n\n\n","updated":1410920287000,"path":"about/index.html","excerpt":"","_id":"1oovx04orpk66ku3","comments":true,"layout":"page"}],"Post":[{"title":"失控：石头是进化缓慢的生命","date":1410795000000,"tags":["uknhqb0xrvy60dax","ad2xmo1vikdcnef7"],"content":"<p>今天中午看失控的时候，有这么一节：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">石头是进化缓慢的生命</div></pre></td></tr></table></figure>\n\n<p>以前也考虑过这样的问题：</p>\n<p>我们作为一个自然人，向体内看，我们会看到细胞等各种碳水化合物，那么站在细胞的角度来看，他们会不会觉得自己也是一个个的“人”？再往外看，我们一个个自以为是人的人，会不会又是一个庞然大物的细胞？例如，把整个地球看成一个“巨人”，这是否成立？</p>\n<p>这涉及三个层次的“人”：</p>\n<ul>\n<li>细胞</li>\n<li>自然人</li>\n<li>地球</li>\n</ul>\n<p>人会生老病死，那么细胞会不会？地球会不会？显然都会，不同的只是生命的长短。细胞在人的体内， 不停的做着看似无规则的运动，却基本不会感知我们作为人自身的运动；而人生活在地球上，我们每个人也在不停的运动着，基本也不会感觉到地球本身的运动。 </p>\n<p>细胞死了之后会怎么样，会进入怎么样的循环里，这个不太清楚（生物没学好）；人死了之后，经过若干的化学反应，又会融入到自然界中，慢慢被植物所吸收，植物又被动物所消化，不知不觉又进入了我们的身体内，这是一个不断循环的过程； 而地球作为星球，所谓的死，应该就是解体，解体之后碎片显然会在宇宙间漂浮，慢慢的又被吸引到其他的星球上，这也是一个循环。</p>\n<p>这个结论在科学上是否成立，其实对于我们来说并不重要，我们所收获的是，我们所理解的生物和非生物，其更抽象的层面上的“生命”是何其的相似。</p>\n<p>对于我们来说，这是一个思维的游戏。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">PS</span>: <span class=\"string\">失控是一本好书，值得一看。</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/失控：石头是进化缓慢的生命.md","raw":"title: \"失控：石头是进化缓慢的生命\"\ndate: 2014/09/15 23:30:00\ntags:\n- 失控\n- 读书笔记\n\n---\n\n今天中午看失控的时候，有这么一节：\n\n```\n石头是进化缓慢的生命\n```\n\n以前也考虑过这样的问题：\n\n我们作为一个自然人，向体内看，我们会看到细胞等各种碳水化合物，那么站在细胞的角度来看，他们会不会觉得自己也是一个个的“人”？再往外看，我们一个个自以为是人的人，会不会又是一个庞然大物的细胞？例如，把整个地球看成一个“巨人”，这是否成立？\n\n这涉及三个层次的“人”：\n\n- 细胞\n- 自然人\n- 地球\n\n人会生老病死，那么细胞会不会？地球会不会？显然都会，不同的只是生命的长短。细胞在人的体内， 不停的做着看似无规则的运动，却基本不会感知我们作为人自身的运动；而人生活在地球上，我们每个人也在不停的运动着，基本也不会感觉到地球本身的运动。 \n\n细胞死了之后会怎么样，会进入怎么样的循环里，这个不太清楚（生物没学好）；人死了之后，经过若干的化学反应，又会融入到自然界中，慢慢被植物所吸收，植物又被动物所消化，不知不觉又进入了我们的身体内，这是一个不断循环的过程； 而地球作为星球，所谓的死，应该就是解体，解体之后碎片显然会在宇宙间漂浮，慢慢的又被吸引到其他的星球上，这也是一个循环。\n\n这个结论在科学上是否成立，其实对于我们来说并不重要，我们所收获的是，我们所理解的生物和非生物，其更抽象的层面上的“生命”是何其的相似。\n\n对于我们来说，这是一个思维的游戏。\n\n```\nPS: 失控是一本好书，值得一看。\n```\n","slug":"失控：石头是进化缓慢的生命","updated":1411028960000,"excerpt":"","_id":"154w8ipzali2w6nb","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"国内外大数据创业企业的融资情况","date":1381420800000,"tags":["nrwb0x0gwf2np2m0","06e5o2nu6ah5sg8f","vnylwi4v1mi86k18"],"content":"<h3 id=\"大数据行业融资情况\">大数据行业融资情况</h3>\n<p>业余时间整理的，见：<a href=\"https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdHpXUHZQVzZLb0k4U09mUjJqV1gyVWc&amp;usp=sharing\" target=\"_blank\" rel=\"external\">https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdHpXUHZQVzZLb0k4U09mUjJqV1gyVWc&amp;usp=sharing</a></p>\n<p>另推荐视频：<a href=\"http://v.youku.com/v_show/id_XNTkyNDI1OTcy.html\" target=\"_blank\" rel=\"external\">http://v.youku.com/v_show/id_XNTkyNDI1OTcy.html</a></p>\n<p>及网站：<a href=\"https://angel.co/big-data\" target=\"_blank\" rel=\"external\">https://angel.co/big-data</a></p>\n","source":"_posts/big-data-enterprice-finance.md","raw":"title: \"国内外大数据创业企业的融资情况\"\ndate: 2013/10/11\ntags : \n- 大数据\n- 创业\n- 融资\n\n---\n\n### 大数据行业融资情况\n\n业余时间整理的，见：https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdHpXUHZQVzZLb0k4U09mUjJqV1gyVWc&usp=sharing\n\n\n另推荐视频：http://v.youku.com/v_show/id_XNTkyNDI1OTcy.html\n\n及网站：https://angel.co/big-data\n","slug":"big-data-enterprice-finance","updated":1411098869000,"excerpt":"","_id":"odou1lf489x2738y","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"移动广告数据挖掘","date":1377014400000,"tags":["dz0zk0s726jhxbu7","65k84h1sox8guq6h","99b2it3cn1talzxr"],"content":"<p>从有米遇到的实际情况，来谈自己对移动广告数据挖掘的一点认识。</p>\n<h2 id=\"为什么需要数据挖掘？\">为什么需要数据挖掘？</h2>\n<blockquote>\n<p>我知道我广告费的一半浪费掉了，但是我不知道哪一半。</p>\n</blockquote>\n<p>这是某位大师说的话，事实上的确如此，可能还不止一半。</p>\n<p>对于我们来说，数据挖掘就是用来指导或者实现广告的精准投放，提升广告的转化率，从而提升开发者收益，形成平台的良性循环。</p>\n<hr>\n<h2 id=\"什么时候需要数据挖掘？\">什么时候需要数据挖掘？</h2>\n<p>在我看来，数据挖掘应该是一种<strong>锦上添花</strong>，而非雪中送炭。广告的转化率对于我们来说是至关重要的，所以我们会重点关注这方面数据。对于积分墙（介绍：<a href=\"http://www.youmi.net/page/product/#wall\" target=\"_blank\" rel=\"external\">http://www.youmi.net/page/product/#wall</a>），大家也许会觉得，用户是奔着积分去下应用的，转化率会很高，不过中间还是有很多因数使得用户没有完成步骤，我们数据挖掘的核心任务就是要把影响转化率的主要因数找出来，以驱动产品改进决策。对于我们来说，可能看见钉子就想锤，看见数据就想挖，但是这样未必总是好的。对于一个企业来说，特别是各种资源都相对紧张的初创企业，做一件事情的成本和收益永远是其要考虑的，毫无疑问，数据挖掘是需要付出成本的，包括时间成本和人力成本等。作为企业决策者就需要衡量投入的成本和获得的收益是否符合增长的预期？如果把这部分的成本放到其他方面会不会获得更好的收益？</p>\n<p>上周末听郭同学讲了这么个情况：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">数据挖掘服务对于小电商肯定是需要的，但是对于小电商，他们的样本数太少，而且对于他们企业来说，主要矛盾并不是怎么挖掘提升转化率，而是怎么开拓新用户。</div></pre></td></tr></table></figure>\n\n<p>具体从有米的实际情况来说，也是这样的。我们是国内第一家移动广告平台，到现在已经三年多，但是真正的数据挖掘也是最近才开始的。并不是我们不重视数据挖掘，只是有很多现实的情况：</p>\n<ul>\n<li>媒介流量是否足够大</li>\n<li>广告量是否足够多（如果广告量不够，那么就算挖掘的模型再完美，那很可能就是无米之炊，很难用来指导广告投放）</li>\n<li>公司资源是否允许（在创业的前三年，市场在迅速的扩大，公司也在快速的扩张，内部的各种资源都紧张，自然要放在解决主要矛盾上）</li>\n</ul>\n<p>基于这些情况，我们的重心也自然不在数据挖掘上，当然也不是完全没有数据挖掘，简单的还是有的。</p>\n<p>所以，对企业来说，特别是初创企业，数据挖掘很多时候是重要不紧急的任务。</p>\n<hr>\n<h2 id=\"是否需要高深的算法？\">是否需要高深的算法？</h2>\n<p>对这个问题，常常让我想起大学时参加的数学建模竞赛：全国赛的时候，大家可能都喜欢使用那些看起来很高深的算法，例如神经网络，遗传算法之类；不过到了美国赛道时候，我们使用的模型并不复杂。一个模型的好与不好，我觉得并不是用算法的复杂度来衡量的，在满足现实条件时，能解决实际问题的模型，就是好的模型。我们关注的是解决问题本身，而不是算法。</p>\n<p><strong><em>好的模型通常是简单，而且应该易于理解的。</em></strong></p>\n<p>对我们来说，高深的挖掘技术，暂时也还没有用上，不过可以列举一些简单有效的案例给大家。</p>\n<hr>\n<h2 id=\"怎么进行数据挖掘？\">怎么进行数据挖掘？</h2>\n<p>这里最重要的一步就是要把每一个步骤到下一个步骤的转化率计算出来，这些计算都很简单，下面给出两个实例（数据是经过简化的）。</p>\n<h3 id=\"积分墙不同接入点下的转化率分析\">积分墙不同接入点下的转化率分析</h3>\n<blockquote>\n<p><a href=\"https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdGZUZWQzVFd1OG43UHpXVzA2SnE3dWc&amp;usp=sharing\" target=\"_blank\" rel=\"external\">https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdGZUZWQzVFd1OG43UHpXVzA2SnE3dWc&amp;usp=sharing</a></p>\n</blockquote>\n<p>从数据或者图像至少可以看出几个问题：</p>\n<ul>\n<li>从启动安装到安装完成这一步的转化率明显比其他步骤低很多</li>\n<li>展示到点击的这个转化率也普遍不高</li>\n<li>从请求到展示这个步骤中，在cmwap的环境下特别低</li>\n<li>从启动下载到下载完成，在cmnet和cmwap环境下也明显偏低</li>\n<li>在wifi环境下，可以看到有两个转化率是明显比总的转化率高的，但是其他的却没有。</li>\n</ul>\n<p>看出了问题，我们再跟问题去寻找问题发生的原因。。。</p>\n<h3 id=\"积分墙下安装包大小对在不同网络环境下的影响\">积分墙下安装包大小对在不同网络环境下的影响</h3>\n<p>数据如下：</p>\n<blockquote>\n<p><a href=\"https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdDlacnZ6YVdBT1pLRy1UR1NfMDV6YkE&amp;usp=sharing\" target=\"_blank\" rel=\"external\">https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdDlacnZ6YVdBT1pLRy1UR1NfMDV6YkE&amp;usp=sharing</a></p>\n</blockquote>\n<p>从这份数据我们也可以得出一些产品或者投放上的优化建议，不过这次重点不关注这个。从图像上看，包的大小和转化率基本呈线性关系。有了这个线性模型，我们就可以去计算，怎么分配不同的广告包，以达到我们收益的最大化。</p>\n<hr>\n<h2 id=\"扩展阅读\">扩展阅读</h2>\n<ul>\n<li>个性化推荐：<a href=\"http://v.qq.com/cover/q/q3w7h1htxh4uppg.html\" target=\"_blank\" rel=\"external\">http://v.qq.com/cover/q/q3w7h1htxh4uppg.html</a></li>\n<li>计算广告学：<a href=\"http://sheetoo.com/app/course/ov?course_id=200\" target=\"_blank\" rel=\"external\">http://sheetoo.com/app/course/ov?course_id=200</a></li>\n</ul>\n<blockquote>\n<p>这两个都是视频，值得看。</p>\n</blockquote>\n","source":"_posts/移动广告数据挖掘.md","raw":"---\ntitle: \"移动广告数据挖掘\"\ndate: 2013/8/21\ntags : \n- 移动互联网\n- 广告\n- 数据挖掘 \n\n---\n\n从有米遇到的实际情况，来谈自己对移动广告数据挖掘的一点认识。\n\n## 为什么需要数据挖掘？\n\n> 我知道我广告费的一半浪费掉了，但是我不知道哪一半。\n\n这是某位大师说的话，事实上的确如此，可能还不止一半。\n\n对于我们来说，数据挖掘就是用来指导或者实现广告的精准投放，提升广告的转化率，从而提升开发者收益，形成平台的良性循环。\n\n----\n\n## 什么时候需要数据挖掘？\n\n在我看来，数据挖掘应该是一种**锦上添花**，而非雪中送炭。广告的转化率对于我们来说是至关重要的，所以我们会重点关注这方面数据。对于积分墙（介绍：<http://www.youmi.net/page/product/#wall>），大家也许会觉得，用户是奔着积分去下应用的，转化率会很高，不过中间还是有很多因数使得用户没有完成步骤，我们数据挖掘的核心任务就是要把影响转化率的主要因数找出来，以驱动产品改进决策。对于我们来说，可能看见钉子就想锤，看见数据就想挖，但是这样未必总是好的。对于一个企业来说，特别是各种资源都相对紧张的初创企业，做一件事情的成本和收益永远是其要考虑的，毫无疑问，数据挖掘是需要付出成本的，包括时间成本和人力成本等。作为企业决策者就需要衡量投入的成本和获得的收益是否符合增长的预期？如果把这部分的成本放到其他方面会不会获得更好的收益？\n\n上周末听郭同学讲了这么个情况：\n\n```\n数据挖掘服务对于小电商肯定是需要的，但是对于小电商，他们的样本数太少，而且对于他们企业来说，主要矛盾并不是怎么挖掘提升转化率，而是怎么开拓新用户。\n```\n\n具体从有米的实际情况来说，也是这样的。我们是国内第一家移动广告平台，到现在已经三年多，但是真正的数据挖掘也是最近才开始的。并不是我们不重视数据挖掘，只是有很多现实的情况：\n\n* 媒介流量是否足够大\n* 广告量是否足够多（如果广告量不够，那么就算挖掘的模型再完美，那很可能就是无米之炊，很难用来指导广告投放）\n* 公司资源是否允许（在创业的前三年，市场在迅速的扩大，公司也在快速的扩张，内部的各种资源都紧张，自然要放在解决主要矛盾上）\n\n基于这些情况，我们的重心也自然不在数据挖掘上，当然也不是完全没有数据挖掘，简单的还是有的。\n\n所以，对企业来说，特别是初创企业，数据挖掘很多时候是重要不紧急的任务。\n\n----\n\n## 是否需要高深的算法？\n\n对这个问题，常常让我想起大学时参加的数学建模竞赛：全国赛的时候，大家可能都喜欢使用那些看起来很高深的算法，例如神经网络，遗传算法之类；不过到了美国赛道时候，我们使用的模型并不复杂。一个模型的好与不好，我觉得并不是用算法的复杂度来衡量的，在满足现实条件时，能解决实际问题的模型，就是好的模型。我们关注的是解决问题本身，而不是算法。\n\n***好的模型通常是简单，而且应该易于理解的。***\n\n对我们来说，高深的挖掘技术，暂时也还没有用上，不过可以列举一些简单有效的案例给大家。\n\n----\n\n## 怎么进行数据挖掘？\n\n\n\n这里最重要的一步就是要把每一个步骤到下一个步骤的转化率计算出来，这些计算都很简单，下面给出两个实例（数据是经过简化的）。\n\n### 积分墙不同接入点下的转化率分析\n\n> <https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdGZUZWQzVFd1OG43UHpXVzA2SnE3dWc&usp=sharing>\n\n从数据或者图像至少可以看出几个问题：\n\n* 从启动安装到安装完成这一步的转化率明显比其他步骤低很多\n* 展示到点击的这个转化率也普遍不高\n* 从请求到展示这个步骤中，在cmwap的环境下特别低\n* 从启动下载到下载完成，在cmnet和cmwap环境下也明显偏低\n* 在wifi环境下，可以看到有两个转化率是明显比总的转化率高的，但是其他的却没有。\n\n看出了问题，我们再跟问题去寻找问题发生的原因。。。\n\n### 积分墙下安装包大小对在不同网络环境下的影响\n\n数据如下：\n\n> <https://docs.google.com/spreadsheet/ccc?key=0AtdtDh06pqwEdDlacnZ6YVdBT1pLRy1UR1NfMDV6YkE&usp=sharing>\n\n从这份数据我们也可以得出一些产品或者投放上的优化建议，不过这次重点不关注这个。从图像上看，包的大小和转化率基本呈线性关系。有了这个线性模型，我们就可以去计算，怎么分配不同的广告包，以达到我们收益的最大化。\n\n----\n\n## 扩展阅读\n\n* 个性化推荐：<http://v.qq.com/cover/q/q3w7h1htxh4uppg.html>\n* 计算广告学：<http://sheetoo.com/app/course/ov?course_id=200>\n\n> 这两个都是视频，值得看。\n","slug":"移动广告数据挖掘","updated":1411098869000,"excerpt":"","_id":"8ri1vitacl0wl4xt","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"BlueKai模式研究","date":1378051200000,"tags":["fn7vlalisaa2ji7l"],"content":"<h2 id=\"产品\">产品</h2>\n<h2 id=\"附录\">附录</h2>\n<p><a href=\"http://www.bluekai.com/\" target=\"_blank\" rel=\"external\">http://www.bluekai.com/</a><br><a href=\"http://www.iamniu.com/2013/03/30/about-bluekai/\" target=\"_blank\" rel=\"external\">http://www.iamniu.com/2013/03/30/about-bluekai/</a></p>\n","source":"_posts/BlueKai模式研究.md","raw":"title: \"BlueKai模式研究\"\ndate: 2013/9/2\ntags: \n- DMP\n\n---\n\n\n## 产品\n\n\n## 附录\n<http://www.bluekai.com/>\n<http://www.iamniu.com/2013/03/30/about-bluekai/>\n","slug":"BlueKai模式研究","updated":1411098869000,"excerpt":"","_id":"e6srqgesjiaj5v9r","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"ElasticSearch问题汇聚","date":1407859200000,"tags":["m35ibk2rjli2coo9","9fbpbfydl3zthopy"],"content":"<h3 id=\"es只允许本地访问\">es只允许本地访问</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> iptables -I INPUT -p tcp --dport <span class=\"number\">9200</span> -j DROP</div><div class=\"line\"><span class=\"built_in\">sudo</span> iptables -I INPUT <span class=\"operator\">-s</span> <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> -p tcp --dport <span class=\"number\">9200</span> -j ACCEPT</div></pre></td></tr></table></figure>\n\n<h3 id=\"部署集群时出现：No_route_to_host\">部署集群时出现：No route to host</h3>\n<p>iptables的问题，清空里面的规则，关闭。</p>\n","source":"_posts/ElasticSearch问题汇聚.md","raw":"title: \"ElasticSearch问题汇聚\"\ndate: 2014/8/13\ntags: \n- ElasticSearch\n- 经验\n\n---\n\n### es只允许本地访问\n\n```bash\nsudo iptables -I INPUT -p tcp --dport 9200 -j DROP\nsudo iptables -I INPUT -s 127.0.0.1 -p tcp --dport 9200 -j ACCEPT\n```\n\n### 部署集群时出现：No route to host\n\niptables的问题，清空里面的规则，关闭。\n\n\n","slug":"ElasticSearch问题汇聚","updated":1411098869000,"excerpt":"","_id":"my08yl1pg8d4r4f4","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"hexo记录","date":1410405570000,"categories":["0hn0a2wtbncuuk27"],"tags":["fu4rjamvpcrvggee"],"content":"<h3 id=\"f-browser-msie没有定义\">f.browser.msie没有定义</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># @see: http://stackoverflow.com/questions/14344289/fancybox-doesnt-work-with-jquery-v1-9-0-f-browser-is-undefined-cannot-read/14344290</div><div class=\"line\"></div><div class=\"line\"># vim themes/phase/layout/_partial/head.ejs</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"http://code.jquery.com/jquery-latest.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"># replace by:</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"http://code.jquery.com/jquery-latest.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"http://code.jquery.com/jquery-migrate-1.0.0.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"文章摘要\">文章摘要</h3>\n<p>在需要的地方加上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--more--&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"插入数学公式\">插入数学公式</h3>\n<p>Mathjax的语法和LaTeX一致，在markdown中直接插入即可(注意上面我们修改了mathjax默认的inlineMath选项)，下面举些例子，更多语法请参考 <a href=\"http://www.lsv.ens-cachan.fr/~markey/LaTeX/doc/Companion-chapter8.pdf\" target=\"_blank\" rel=\"external\">LaTeX Higher Mathematics</a>：</p>\n<p><a href=\"http://blog.163.com/goldman2000@126/blog/static/167296895201221242646561/\" target=\"_blank\" rel=\"external\">LaTeX入门</a></p>\n<p>插入方程组:</p>\n<p>\\begin{aligned}<br>\\dot{x} &amp; = \\sigma(y-x) \\\\<br>\\dot{y} &amp; = \\rho x - y - xz \\\\<br>\\dot{z} &amp; = -\\beta z + xy<br>\\end{aligned}</p>\n<p>插入矩阵：</p>\n<p>\\begin{bmatrix}<br>1 &amp; 2\\\\<br>3 &amp; 4<br>\\end{bmatrix}</p>\n<p>薛定谔方程：</p>\n<p>$$ \\hbar\\frac{\\partial \\psi}{\\partial t}<br>= \\frac{-\\hbar^2}{2m} \\left(<br>\\frac{\\partial^2}{\\partial x^2}</p>\n<ul>\n<li>\\frac{\\partial^2}{\\partial y^2}</li>\n<li>\\frac{\\partial^2}{\\partial z^2}<br>\\right<br>) \\psi + V \\psi. $$</li>\n</ul>\n<p>see: <a href=\"http://www.winterland.me/2013/12/hexo-mathjax/\" target=\"_blank\" rel=\"external\">http://www.winterland.me/2013/12/hexo-mathjax/</a></p>\n<p>vim themesfolder/layout/_partial/mathjax.ejs</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">MathJax.Hub.Config({</div><div class=\"line\">    tex2jax: {</div><div class=\"line\">        inlineMath: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>], [<span class=\"string\">\"\\\\(\"</span>,<span class=\"string\">\"\\\\)\"</span>]  ],</div><div class=\"line\">        processEscapes: <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">});</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">MathJax.Hub.Config({</div><div class=\"line\">    tex2jax: {</div><div class=\"line\">        skipTags: [<span class=\"string\">'script'</span>, <span class=\"string\">'noscript'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'textarea'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'code'</span>]</div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">});</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">MathJax.Hub.Queue(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> all = MathJax.Hub.getAllJax(), i;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i &lt; all.length; i += <span class=\"number\">1</span>) {</div><div class=\"line\">        all[i].SourceElement().parentNode.className += <span class=\"string\">' has-jax'</span>;</div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">});</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"自定义页面\">自定义页面</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n page <span class=\"string\">\"about\"</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"加载慢的问题\">加载慢的问题</h3>\n<p>通常是因为加载外部资源超时，例如google开放的jquery库等。修改即可。</p>\n<h3 id=\"常用命令\">常用命令</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean  <span class=\"comment\"># deploy到github时，有时需要先运行该命令，例如修改样式时</span></div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div><div class=\"line\">hexo s</div><div class=\"line\">hexo n <span class=\"string\">\"title\"</span>   <span class=\"comment\"># 生成文章</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/hexo记录.md","raw":"title: hexo记录\ndate: 2014-09-11 11:19:30\ncategories: Record\ntags: \n- hexo\n\n---\n\n### f.browser.msie没有定义\n\n```\n# @see: http://stackoverflow.com/questions/14344289/fancybox-doesnt-work-with-jquery-v1-9-0-f-browser-is-undefined-cannot-read/14344290\n\n# vim themes/phase/layout/_partial/head.ejs\n\n<script src=\"http://code.jquery.com/jquery-latest.js\"></script>\n\n# replace by:\n<script src=\"http://code.jquery.com/jquery-latest.js\"></script>\n<script src=\"http://code.jquery.com/jquery-migrate-1.0.0.js\"></script>\n\n```\n\n\n### 文章摘要\n\n在需要的地方加上：\n\n```\n<!--more-->\n```\n\n### 插入数学公式\n\nMathjax的语法和LaTeX一致，在markdown中直接插入即可(注意上面我们修改了mathjax默认的inlineMath选项)，下面举些例子，更多语法请参考 [LaTeX Higher Mathematics](http://www.lsv.ens-cachan.fr/~markey/LaTeX/doc/Companion-chapter8.pdf  )：\n\n[LaTeX入门](http://blog.163.com/goldman2000@126/blog/static/167296895201221242646561/ )\n\n插入方程组:\n\n\\begin{aligned}\n\\dot{x} & = \\sigma(y-x) \\\\\\\n\\dot{y} & = \\rho x - y - xz \\\\\\\n\\dot{z} & = -\\beta z + xy\n\\end{aligned}\n\n插入矩阵：\n\n\\begin{bmatrix}\n1 & 2\\\\\\\n3 & 4\n\\end{bmatrix}\n\n薛定谔方程：\n\n$$ \\hbar\\frac{\\partial \\psi}{\\partial t}\n= \\frac{-\\hbar^2}{2m} \\left(\n\\frac{\\partial^2}{\\partial x^2}\n+ \\frac{\\partial^2}{\\partial y^2}\n+ \\frac{\\partial^2}{\\partial z^2}\n\\right\n) \\psi + V \\psi. $$\n\n\nsee: http://www.winterland.me/2013/12/hexo-mathjax/\n\nvim themesfolder/layout/\\_partial/mathjax.ejs\n\n```html\n<!-- mathjax config similar to math.stackexchange -->\n\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n    tex2jax: {\n        inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"]  ],\n        processEscapes: true\n\n    }\n\n});\n</script>\n\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n    tex2jax: {\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n\n    }\n\n});\n</script>\n\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Queue(function() {\n    var all = MathJax.Hub.getAllJax(), i;\n    for(i=0; i < all.length; i += 1) {\n        all[i].SourceElement().parentNode.className += ' has-jax';\n\n    }\n\n});\n</script>\n\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n```\n\n### 自定义页面\n\n```bash\nhexo n page \"about\"\n```\n\n### 加载慢的问题\n\n通常是因为加载外部资源超时，例如google开放的jquery库等。修改即可。\n\n### 常用命令\n\n```bash\nhexo clean  # deploy到github时，有时需要先运行该命令，例如修改样式时\nhexo g\nhexo d\nhexo s\nhexo n \"title\"   # 生成文章 \n```\n\n","slug":"hexo记录","updated":1411116093000,"excerpt":"","_id":"1aoi1lvf95he3744","comments":true,"layout":"post","photos":[],"link":""},{"title":"R语言的小技巧","date":1378396800000,"tags":["87odq62tjhx83yb8","9fbpbfydl3zthopy"],"content":"<h3 id=\"ifelse和if_…_else_…不同\">ifelse和if … else …不同</h3>\n<p>认为相同，主要是受到之前经验的影响，不过这里的ifelse是向量化的运算，返回值的长度会和test的长度一致。可以看ifelse的源码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> (test, yes, no) </div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (is.atomic(test)) </div><div class=\"line\">        storage.mode(test) &lt;- <span class=\"string\">\"logical\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span> test &lt;- <span class=\"keyword\">if</span> (isS4(test)) </div><div class=\"line\">        as(test, <span class=\"string\">\"logical\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span> as.logical(test)</div><div class=\"line\">    ans &lt;- test</div><div class=\"line\">    ok &lt;- !(nas &lt;- is.na(test))</div><div class=\"line\">    <span class=\"keyword\">if</span> (any(test[ok])) </div><div class=\"line\">        ans[test & ok] &lt;- rep(yes, length.out = length(ans))[test & </div><div class=\"line\">            ok]</div><div class=\"line\">    <span class=\"keyword\">if</span> (any(!test[ok])) </div><div class=\"line\">        ans[!test & ok] &lt;- rep(no, length.out = length(ans))[!test & </div><div class=\"line\">            ok]</div><div class=\"line\">    ans[nas] &lt;- <span class=\"literal\">NA</span></div><div class=\"line\">    ans</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; ifelse(c(<span class=\"literal\">T</span>, <span class=\"literal\">F</span>, <span class=\"literal\">T</span>), c(<span class=\"number\">1</span>,<span class=\"number\">2</span>), c(<span class=\"number\">5</span>,<span class=\"number\">6</span>))  <span class=\"comment\"># 长度不够，则会自动补充</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">1</span> <span class=\"number\">6</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"install_RCurld的问题\">install RCurld的问题</h3>\n<p>在ubuntu12.04上安装：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">install.packages(<span class=\"string\">\"RCurl\"</span>)</div></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">checking <span class=\"keyword\">for</span> curl-config... no</div><div class=\"line\">Cannot <span class=\"keyword\">find</span> curl-config</div><div class=\"line\">ERROR: configuration failed <span class=\"keyword\">for</span> <span class=\"keyword\">package</span> ‘RCurl’</div></pre></td></tr></table></figure>\n\n<p>解决：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> apt-get install libcurl4-gnutls-dev</div></pre></td></tr></table></figure>\n\n<p>附: <a href=\"http://cos.name/cn/topic/108303\" target=\"_blank\" rel=\"external\">http://cos.name/cn/topic/108303</a></p>\n","source":"_posts/R/R语言的小技巧.md","raw":"title: \"R语言的小技巧\"\ndate: 2013/9/6\ntags: \n- R\n- 经验\n\n---\n\n\n### ifelse和if ... else ...不同\n\n认为相同，主要是受到之前经验的影响，不过这里的ifelse是向量化的运算，返回值的长度会和test的长度一致。可以看ifelse的源码：\n\n```r\nfunction (test, yes, no) \n{\n    if (is.atomic(test)) \n        storage.mode(test) <- \"logical\"\n    else test <- if (isS4(test)) \n        as(test, \"logical\")\n    else as.logical(test)\n    ans <- test\n    ok <- !(nas <- is.na(test))\n    if (any(test[ok])) \n        ans[test & ok] <- rep(yes, length.out = length(ans))[test & \n            ok]\n    if (any(!test[ok])) \n        ans[!test & ok] <- rep(no, length.out = length(ans))[!test & \n            ok]\n    ans[nas] <- NA\n    ans\n}\n```\n\n```r\n> ifelse(c(T, F, T), c(1,2), c(5,6))  # 长度不够，则会自动补充\n[1] 1 6 1\n```\n\n### install RCurld的问题\n\n在ubuntu12.04上安装：\n\n```r\ninstall.packages(\"RCurl\")\n```\n\n提示：\n\n```\nchecking for curl-config... no\nCannot find curl-config\nERROR: configuration failed for package ‘RCurl’\n```\n\n解决：\n\n```shell\nsudo apt-get install libcurl4-gnutls-dev\n```\n\n附: http://cos.name/cn/topic/108303\n\n\n","slug":"R/R语言的小技巧","updated":1411873728000,"excerpt":"","_id":"mrvqxo0oyw7e9pgz","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"R function apply","date":1376928000000,"tags":["87odq62tjhx83yb8","w2q9hylokv50b0nz","h3jrpf97ovb8tzjx"],"content":"<h2 id=\"apply\">apply</h2>\n<p>   apply(X, MARGIN, FUN, …)</p>\n<h3 id=\"参数说明\">参数说明</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">X:         array or matrix</div><div class=\"line\">MARGIN:    <span class=\"number\">1</span>表示按行计算，<span class=\"number\">2</span>表示按列计算，c(<span class=\"number\">1</span>, <span class=\"number\">2</span>)表示对行和列同时作用，就会对每个元素都产生作用</div><div class=\"line\">FUN:       作用函数</div><div class=\"line\"><span class=\"keyword\">...</span>:       作用函数的参数</div></pre></td></tr></table></figure>\n\n<h3 id=\"实例\">实例</h3>\n<p>按行计算</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"tag\">a</span></div><div class=\"line\"><span class=\"attr_selector\">[,1]</span> <span class=\"attr_selector\">[,2]</span> <span class=\"attr_selector\">[,3]</span> <span class=\"attr_selector\">[,4]</span></div><div class=\"line\"><span class=\"attr_selector\">[1,]</span> 1 3 2 1</div><div class=\"line\"><span class=\"attr_selector\">[2,]</span> 2 1 3 2</div><div class=\"line\">&gt; <span class=\"function\">apply</span>(<span class=\"tag\">a</span>, 1, <span class=\"function\">function</span>(x)<span class=\"function\">sum</span>(x))     # 可以简化成：<span class=\"function\">apply</span>(<span class=\"tag\">a</span>, 1, sum)</div><div class=\"line\"><span class=\"attr_selector\">[1]</span> 7 8</div></pre></td></tr></table></figure>\n\n<p>按列计算</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&gt; <span class=\"function\">apply</span>(<span class=\"tag\">a</span>, 2, <span class=\"function\">function</span>(x)<span class=\"function\">sum</span>(x))</div><div class=\"line\"><span class=\"attr_selector\">[1]</span> 3 4 5 3</div></pre></td></tr></table></figure>\n\n<p>行列同时作用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\">apply</span>(<span class=\"tag\">a</span>, <span class=\"function\">c</span>(1,2), <span class=\"function\">function</span>(x)<span class=\"function\">sum</span>(x))</div><div class=\"line\"><span class=\"attr_selector\">[,1]</span> <span class=\"attr_selector\">[,2]</span> <span class=\"attr_selector\">[,3]</span> <span class=\"attr_selector\">[,4]</span></div><div class=\"line\"><span class=\"attr_selector\">[1,]</span> 1 3 2 1</div><div class=\"line\"><span class=\"attr_selector\">[2,]</span> 2 1 3 2</div></pre></td></tr></table></figure>\n\n<p>扩展参数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\">apply</span>(<span class=\"tag\">a</span>, 1, <span class=\"function\">function</span>(x, t)x+t, 10)    # </div><div class=\"line\"><span class=\"attr_selector\">[,1]</span> <span class=\"attr_selector\">[,2]</span></div><div class=\"line\"><span class=\"attr_selector\">[1,]</span> 11 12</div><div class=\"line\"><span class=\"attr_selector\">[2,]</span> 13 11</div><div class=\"line\"><span class=\"attr_selector\">[3,]</span> 12 13</div><div class=\"line\"><span class=\"attr_selector\">[4,]</span> 11 12</div></pre></td></tr></table></figure>\n\n","source":"_posts/R/function.apply.md","raw":"title: R function apply\ndate: 2013/8/20\ntags : \n- R\n- apply\n- 向量化运算\n\n---\n\n## apply\n   apply(X, MARGIN, FUN, ...)\n\n### 参数说明\n\n```\nX:         array or matrix\nMARGIN:    1表示按行计算，2表示按列计算，c(1, 2)表示对行和列同时作用，就会对每个元素都产生作用\nFUN:       作用函数\n...:       作用函数的参数\n```\n\n### 实例\n\n按行计算\n\n```\n\n> a\n[,1] [,2] [,3] [,4]\n[1,] 1 3 2 1\n[2,] 2 1 3 2\n> apply(a, 1, function(x)sum(x))     # 可以简化成：apply(a, 1, sum)\n[1] 7 8\n\n```\n\n按列计算\n\n```\n\n> apply(a, 2, function(x)sum(x))\n[1] 3 4 5 3\n\n```\n\n行列同时作用\n\n```\n> apply(a, c(1,2), function(x)sum(x))\n[,1] [,2] [,3] [,4]\n[1,] 1 3 2 1\n[2,] 2 1 3 2\n\n```\n\n扩展参数\n\n```\n> apply(a, 1, function(x, t)x+t, 10)    # \n[,1] [,2]\n[1,] 11 12\n[2,] 13 11\n[3,] 12 13\n[4,] 11 12\n\n```\n\n","slug":"R/function.apply","updated":1411873728000,"excerpt":"","_id":"3veql03n9wep2a9x","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"R function lapply","date":1376928000000,"tags":["87odq62tjhx83yb8","iywvcer66x0m6a7f","h3jrpf97ovb8tzjx"],"content":"<blockquote>\n<p>包括函数：lapply, sapply, vapply</p>\n</blockquote>\n<h2 id=\"lapply\">lapply</h2>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lapply(X, FUN, <span class=\"keyword\">...</span>)</div></pre></td></tr></table></figure>\n\n<p>该函数会返回一个长度和X参数的长度相同的列表，其中每个元素都是X参数在FUN函数作用下的结果。</p>\n<h3 id=\"实现源码\">实现源码</h3>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> (X, FUN, <span class=\"keyword\">...</span>) </div><div class=\"line\">{</div><div class=\"line\">    FUN &lt;- match.fun(FUN)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!is.vector(X) || is.object(X))    <span class=\"comment\"># 如果不是向量（列表等也是向量），则会先转成list</span></div><div class=\"line\">        X &lt;- as.list(X)</div><div class=\"line\">    .Internal(lapply(X, FUN))   <span class=\"comment\"># 直接调用C核心的函数</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"实例\">实例</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a</div><div class=\"line\">     [,<span class=\"number\">1</span>] [,<span class=\"number\">2</span>]</div><div class=\"line\">[<span class=\"number\">1</span>,]    <span class=\"number\">1</span>    <span class=\"number\">3</span></div><div class=\"line\">[<span class=\"number\">2</span>,]    <span class=\"number\">2</span>    <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">&gt; lapply(a, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span></span>x^<span class=\"number\">2</span>)  # length(a) == <span class=\"number\">4</span></div><div class=\"line\"><span class=\"string\">[[1]]</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">[[2]]</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">[[3]]</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">[[4]]</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">&gt; d</div><div class=\"line\">$a</div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">1</span> <span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\">$b</div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></div><div class=\"line\"></div><div class=\"line\">&gt; lapply(d, sum)  # length(d) == <span class=\"number\">2</span></div><div class=\"line\">$a</div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">3</span></div><div class=\"line\"></div><div class=\"line\">$b</div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">12</span></div></pre></td></tr></table></figure>\n\n<p>一个实际的例子：一次性加载某个目录下的R文件</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CaiSource &lt;- <span class=\"keyword\">function</span>(x, p.path) {</div><div class=\"line\">  <span class=\"keyword\">source</span>(paste(p.path, x, sep=<span class=\"string\">\"\"</span>))</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># lib.path是指定的目录</span></div><div class=\"line\">lapply(list.files(path=lib.path, pattern=<span class=\"string\">'\\\\.[rR]$'</span>), CaiSource, lib.path)</div></pre></td></tr></table></figure>\n\n<h2 id=\"sapply\">sapply</h2>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sapply(X, FUN, <span class=\"keyword\">...</span>, simplify = <span class=\"literal\">TRUE</span>, USE.NAMES = <span class=\"literal\">TRUE</span>)</div></pre></td></tr></table></figure>\n\n<p>sapply是对lapply的封装，实现代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> (X, FUN, <span class=\"keyword\">...</span>, simplify = <span class=\"literal\">TRUE</span>, USE.NAMES = <span class=\"literal\">TRUE</span>) </div><div class=\"line\">{</div><div class=\"line\">    FUN &lt;- match.fun(FUN)</div><div class=\"line\">    answer &lt;- lapply(X = X, FUN = FUN, <span class=\"keyword\">...</span>)     <span class=\"comment\"># 直接调用lapply</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (USE.NAMES && is.character(X) && is.null(names(answer))) </div><div class=\"line\">        names(answer) &lt;- X   <span class=\"comment\"># USE。NAMES参数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!identical(simplify, <span class=\"literal\">FALSE</span>) && length(answer)) </div><div class=\"line\">        simplify2array(answer, higher = (simplify == <span class=\"string\">\"array\"</span>))  <span class=\"comment\"># simplify参数，默认会转换成array</span></div><div class=\"line\">    <span class=\"keyword\">else</span> answer</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"vapply\">vapply</h2>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vapply(X, FUN, FUN.VALUE, <span class=\"keyword\">...</span>, USE.NAMES = <span class=\"literal\">TRUE</span>)</div></pre></td></tr></table></figure>\n\n<p>该函数和sapply类似</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> (X, FUN, FUN.VALUE, <span class=\"keyword\">...</span>, USE.NAMES = <span class=\"literal\">TRUE</span>) </div><div class=\"line\">{</div><div class=\"line\">    FUN &lt;- match.fun(FUN)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!is.vector(X) || is.object(X))   <span class=\"comment\"># 对数据进行预处理</span></div><div class=\"line\">        X &lt;- as.list(X)</div><div class=\"line\">    .Internal(vapply(X, FUN, FUN.VALUE, USE.NAMES))</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>FUN.VALUE的值定义是？</p>\n","source":"_posts/R/function.lapply.md","raw":"title: \"R function lapply\"\ndate: 2013/8/20 \ntags : \n- R\n- lapply\n- 向量化运算\n\n---\n\n> 包括函数：lapply, sapply, vapply\n\n## lapply\n\n```r\nlapply(X, FUN, ...)\n```\n\n该函数会返回一个长度和X参数的长度相同的列表，其中每个元素都是X参数在FUN函数作用下的结果。\n\n### 实现源码\n\n```r\nfunction (X, FUN, ...) \n{\n    FUN <- match.fun(FUN)\n    if (!is.vector(X) || is.object(X))    # 如果不是向量（列表等也是向量），则会先转成list\n        X <- as.list(X)\n    .Internal(lapply(X, FUN))   # 直接调用C核心的函数\n}\n```\n\n### 实例\n\n```\n> a\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n> lapply(a, function(x)x^2)  # length(a) == 4\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 9\n\n[[4]]\n[1] 16\n\n> d\n$a\n[1] 1 2\n\n$b\n[1] 3 4 5\n\n> lapply(d, sum)  # length(d) == 2\n$a\n[1] 3\n\n$b\n[1] 12\n\n```\n\n一个实际的例子：一次性加载某个目录下的R文件\n\n```r\n  CaiSource <- function(x, p.path) {\n    source(paste(p.path, x, sep=\"\"))\n  }\n  \n  # lib.path是指定的目录\n  lapply(list.files(path=lib.path, pattern='\\\\.[rR]$'), CaiSource, lib.path)\n```\n\n\n## sapply\n\n```r\nsapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)\n```\n\nsapply是对lapply的封装，实现代码：\n\n```r\nfunction (X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) \n{\n    FUN <- match.fun(FUN)\n    answer <- lapply(X = X, FUN = FUN, ...)     # 直接调用lapply\n    if (USE.NAMES && is.character(X) && is.null(names(answer))) \n        names(answer) <- X   # USE。NAMES参数\n    if (!identical(simplify, FALSE) && length(answer)) \n        simplify2array(answer, higher = (simplify == \"array\"))  # simplify参数，默认会转换成array\n    else answer\n}\n```\n\n## vapply\n\n```r\nvapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\n```\n\n该函数和sapply类似\n\n```r\nfunction (X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE) \n{\n    FUN <- match.fun(FUN)\n    if (!is.vector(X) || is.object(X))   # 对数据进行预处理\n        X <- as.list(X)\n    .Internal(vapply(X, FUN, FUN.VALUE, USE.NAMES))\n}\n```\n\nFUN.VALUE的值定义是？\n\n","slug":"R/function.lapply","updated":1411873728000,"excerpt":"","_id":"ltendsuepi56erb5","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"R function tapply","date":1376928000000,"tags":["87odq62tjhx83yb8","nb244p6h3907avgk","h3jrpf97ovb8tzjx"],"content":"<h2 id=\"tapply\">tapply</h2>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tapply(X, INDEX, FUN = <span class=\"literal\">NULL</span>, <span class=\"keyword\">...</span>, simplify = <span class=\"literal\">TRUE</span>)</div></pre></td></tr></table></figure>\n\n<p>把变量X（通常为向量）通过函数FUN作用在INDEX这个因子变量上，返回值可以根据simplify参数设置。simplify = T（默认）返回array，simplify = F则返回list。</p>\n<h3 id=\"实例\">实例</h3>\n<p>计算各个省份的人均收入</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; ins &lt;- <span class=\"keyword\">list</span>(year=c(<span class=\"number\">2011</span>, <span class=\"number\">2012</span>, <span class=\"number\">2012</span>, <span class=\"number\">2013</span>, <span class=\"number\">2013</span>), province=c(<span class=\"string\">\"GZ\"</span>, <span class=\"string\">\"GZ\"</span>, <span class=\"string\">\"BG\"</span>, <span class=\"string\">\"BG\"</span>, <span class=\"string\">\"GZ\"</span>), income=c(<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>))  <span class=\"comment\"># 定义数据</span></div><div class=\"line\">&gt; ins</div><div class=\"line\"><span class=\"variable\">$year</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">2011</span> <span class=\"number\">2012</span> <span class=\"number\">2012</span> <span class=\"number\">2013</span> <span class=\"number\">2013</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$province</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"string\">\"GZ\"</span> <span class=\"string\">\"GZ\"</span> <span class=\"string\">\"BG\"</span> <span class=\"string\">\"BG\"</span> <span class=\"string\">\"GZ\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$income</span></div><div class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">10</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">12</span> <span class=\"number\">15</span></div><div class=\"line\"></div><div class=\"line\">&gt; tapply(ins<span class=\"variable\">$income</span>, ins<span class=\"variable\">$province</span>, mean)</div><div class=\"line\">      BG       GZ </div><div class=\"line\"><span class=\"number\">12.50000</span> <span class=\"number\">12.33333</span></div></pre></td></tr></table></figure>\n\n<p>计算各个省份在各个年份的平均收入</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\">tapply</span>(<span class=\"tag\">ins</span><span class=\"variable\">$income</span>, <span class=\"function\">list</span>(<span class=\"tag\">ins</span><span class=\"variable\">$province</span>, <span class=\"tag\">ins</span><span class=\"variable\">$year</span>), mean)</div><div class=\"line\">   2011 2012 2013</div><div class=\"line\">BG   NA   13   12</div><div class=\"line\">GZ   10   12   15</div></pre></td></tr></table></figure>\n\n<h3 id=\"源码\">源码</h3>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> (X, INDEX, FUN = <span class=\"literal\">NULL</span>, <span class=\"keyword\">...</span>, simplify = <span class=\"literal\">TRUE</span>) </div><div class=\"line\">{</div><div class=\"line\">    FUN &lt;- <span class=\"keyword\">if</span> (!is.null(FUN)) </div><div class=\"line\">        match.fun(FUN)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!is.list(INDEX))           <span class=\"comment\"># 如果分组因子不是list，则自动转为list</span></div><div class=\"line\">        INDEX &lt;- list(INDEX)</div><div class=\"line\">    nI &lt;- length(INDEX)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!nI) </div><div class=\"line\">        <span class=\"keyword\">stop</span>(<span class=\"string\">\"'INDEX' is of length zero\"</span>)</div><div class=\"line\">    namelist &lt;- vector(<span class=\"string\">\"list\"</span>, nI)</div><div class=\"line\">    names(namelist) &lt;- names(INDEX)</div><div class=\"line\">    extent &lt;- integer(nI) </div><div class=\"line\">    nx &lt;- length(X)</div><div class=\"line\">    one &lt;- <span class=\"number\">1L</span></div><div class=\"line\">    group &lt;- rep.int(one, nx)     <span class=\"comment\"># 构造一个重复向量</span></div><div class=\"line\">    ngroup &lt;- one</div><div class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> seq_along(INDEX)) {   <span class=\"comment\"># 对分组因子列表的下标进行循环处理</span></div><div class=\"line\">        index &lt;- as.factor(INDEX[[i]])</div><div class=\"line\">        <span class=\"keyword\">if</span> (length(index) != nx) </div><div class=\"line\">            <span class=\"keyword\">stop</span>(<span class=\"string\">\"arguments must have same length\"</span>)</div><div class=\"line\">        namelist[[i]] &lt;- levels(index)</div><div class=\"line\">        extent[i] &lt;- nlevels(index)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 注意这里计算分组的算法：计算组合后的分组情况</span></div><div class=\"line\">        group &lt;- group + ngroup * (as.integer(index) - one)</div><div class=\"line\">        ngroup &lt;- ngroup * nlevels(index)</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">if</span> (is.null(FUN)) </div><div class=\"line\">        <span class=\"keyword\">return</span>(group)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 分组数据，完成映射（FUN）</span></div><div class=\"line\">    ans &lt;- lapply(X = split(X, group), FUN = FUN, <span class=\"keyword\">...</span>)   <span class=\"comment\"># split按照分组因子切割变量X</span></div><div class=\"line\">    index &lt;- as.integer(names(ans))</div><div class=\"line\">    <span class=\"keyword\">if</span> (simplify && all(unlist(lapply(ans, length)) == <span class=\"number\">1L</span>)) {</div><div class=\"line\">        ansmat &lt;- array(dim = extent, dimnames = namelist)</div><div class=\"line\">        ans &lt;- unlist(ans, recursive = <span class=\"literal\">FALSE</span>)</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">else</span> {</div><div class=\"line\">        ansmat &lt;- array(vector(<span class=\"string\">\"list\"</span>, prod(extent)), dim = extent, </div><div class=\"line\">            dimnames = namelist)</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">if</span> (length(index)) {</div><div class=\"line\">        names(ans) &lt;- <span class=\"literal\">NULL</span></div><div class=\"line\">        ansmat[index] &lt;- ans</div><div class=\"line\">    }</div><div class=\"line\">    ansmat</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这个源码有可以优化的地方，例如循环体里面的：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">namelist[[i]] &lt;- levels(index)</div><div class=\"line\">extent[i] &lt;- nlevels(index)</div><div class=\"line\">ngroup &lt;- ngroup * nlevels(index)</div></pre></td></tr></table></figure>\n\n<p>实际上nlevels(index)只是对levels(index)取length，所以这三行代码实质上调用了levels函数三次（在一次循环体里面），调用nlevels和length两次。可以修改成这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">namelist[[i]] &lt;- levels(index)</div><div class=\"line\">extent[i] &lt;- length(namelist[[i]])</div><div class=\"line\">ngroup &lt;- ngroup * extent[i]</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有时间的话，可以考虑把tapply改成C语言实现</p>\n</blockquote>\n","source":"_posts/R/function.tapply.md","raw":"---\ntitle: \"R function tapply\"\ndate: 2013/8/20 \ntags : \n- R\n- tapply\n- 向量化运算\n\n---\n\n\n## tapply\n\n```r\ntapply(X, INDEX, FUN = NULL, ..., simplify = TRUE)\n```\n\n把变量X（通常为向量）通过函数FUN作用在INDEX这个因子变量上，返回值可以根据simplify参数设置。simplify = T（默认）返回array，simplify = F则返回list。\n\n### 实例\n\n计算各个省份的人均收入\n\n```\n> ins <- list(year=c(2011, 2012, 2012, 2013, 2013), province=c(\"GZ\", \"GZ\", \"BG\", \"BG\", \"GZ\"), income=c(10, 12, 13, 12, 15))  # 定义数据\n> ins\n$year\n[1] 2011 2012 2012 2013 2013\n\n$province\n[1] \"GZ\" \"GZ\" \"BG\" \"BG\" \"GZ\"\n\n$income\n[1] 10 12 13 12 15\n\n> tapply(ins$income, ins$province, mean)\n      BG       GZ \n12.50000 12.33333 \n```\n\n计算各个省份在各个年份的平均收入\n\n```\n> tapply(ins$income, list(ins$province, ins$year), mean)\n   2011 2012 2013\nBG   NA   13   12\nGZ   10   12   15\n```\n\n### 源码\n\n```r\nfunction (X, INDEX, FUN = NULL, ..., simplify = TRUE) \n{\n    FUN <- if (!is.null(FUN)) \n        match.fun(FUN)\n    if (!is.list(INDEX))           # 如果分组因子不是list，则自动转为list\n        INDEX <- list(INDEX)\n    nI <- length(INDEX)\n    if (!nI) \n        stop(\"'INDEX' is of length zero\")\n    namelist <- vector(\"list\", nI)\n    names(namelist) <- names(INDEX)\n    extent <- integer(nI) \n    nx <- length(X)\n    one <- 1L\n    group <- rep.int(one, nx)     # 构造一个重复向量\n    ngroup <- one\n    for (i in seq_along(INDEX)) {   # 对分组因子列表的下标进行循环处理\n        index <- as.factor(INDEX[[i]])\n        if (length(index) != nx) \n            stop(\"arguments must have same length\")\n        namelist[[i]] <- levels(index)\n        extent[i] <- nlevels(index)\n        \n        # 注意这里计算分组的算法：计算组合后的分组情况\n        group <- group + ngroup * (as.integer(index) - one)\n        ngroup <- ngroup * nlevels(index)\n    }\n    if (is.null(FUN)) \n        return(group)\n        \n    # 分组数据，完成映射（FUN）\n    ans <- lapply(X = split(X, group), FUN = FUN, ...)   # split按照分组因子切割变量X\n    index <- as.integer(names(ans))\n    if (simplify && all(unlist(lapply(ans, length)) == 1L)) {\n        ansmat <- array(dim = extent, dimnames = namelist)\n        ans <- unlist(ans, recursive = FALSE)\n    }\n    else {\n        ansmat <- array(vector(\"list\", prod(extent)), dim = extent, \n            dimnames = namelist)\n    }\n    if (length(index)) {\n        names(ans) <- NULL\n        ansmat[index] <- ans\n    }\n    ansmat\n}\n```\n\n这个源码有可以优化的地方，例如循环体里面的：\n\n```r\n        namelist[[i]] <- levels(index)\n        extent[i] <- nlevels(index)\n        ngroup <- ngroup * nlevels(index)\n```\n\n实际上nlevels(index)只是对levels(index)取length，所以这三行代码实质上调用了levels函数三次（在一次循环体里面），调用nlevels和length两次。可以修改成这样：\n\n```r\n        namelist[[i]] <- levels(index)\n        extent[i] <- length(namelist[[i]])\n        ngroup <- ngroup * extent[i]\n```\n\n> 有时间的话，可以考虑把tapply改成C语言实现\n","slug":"R/function.tapply","updated":1411873728000,"excerpt":"","_id":"igwlyvw9cke2iwvp","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"R编码规范","date":1377619200000,"tags":["87odq62tjhx83yb8"],"content":"<h2 id=\"编码规范\">编码规范</h2>\n<p>google：<a href=\"http://google-styleguide.googlecode.com/svn/trunk/Rguide.xml\" target=\"_blank\" rel=\"external\">http://google-styleguide.googlecode.com/svn/trunk/Rguide.xml</a></p>\n<p>中文版：<a href=\"http://www.road2stat.com/rstyle/rstyle.html\" target=\"_blank\" rel=\"external\">http://www.road2stat.com/rstyle/rstyle.html</a></p>\n<p><a href=\"https://docs.google.com/document/d/1esDVxyWvH8AsX-VJa-8oqWaHLs4stGlIbk8kLc5VlII/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/document/d/1esDVxyWvH8AsX-VJa-8oqWaHLs4stGlIbk8kLc5VlII/edit</a></p>\n<h3 id=\"补充规范\">补充规范</h3>\n<h4 id=\"变量的特殊前缀\">变量的特殊前缀</h4>\n<ul>\n<li>tmp：   临时变量</li>\n<li>p:      函数参数</li>\n</ul>\n<h4 id=\"变量的后缀\">变量的后缀</h4>\n<p>后缀通常用来表示变量的类型，如：</p>\n<ul>\n<li>lst，tb，vec, ft等</li>\n<li>fn: 函数变量, 通常在例如tapply等函数中使用</li>\n</ul>\n<h2 id=\"技巧\">技巧</h2>\n<ol>\n<li>在shell直接运行R脚本</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/Rscript --slave</span></div><div class=\"line\">argv &lt;- commandArgs(TRUE)</div><div class=\"line\">x &lt;- as.numeric(argv[<span class=\"number\">1</span>])</div></pre></td></tr></table></figure>\n\n<p>然后：sudo chmod +x file.r</p>\n","source":"_posts/R/r编码规范.md","raw":"title: \"R编码规范\"\ndate: 2013/8/28\ntags: \n- R\n\n---\n\n## 编码规范\n\ngoogle：http://google-styleguide.googlecode.com/svn/trunk/Rguide.xml\n\n中文版：http://www.road2stat.com/rstyle/rstyle.html\n\nhttps://docs.google.com/document/d/1esDVxyWvH8AsX-VJa-8oqWaHLs4stGlIbk8kLc5VlII/edit\n\n### 补充规范\n\n#### 变量的特殊前缀\n\n* tmp：   临时变量\n* p:      函数参数\n\n#### 变量的后缀\n\n后缀通常用来表示变量的类型，如：\n\n* lst，tb，vec, ft等\n* fn: 函数变量, 通常在例如tapply等函数中使用\n\n## 技巧\n\n1. 在shell直接运行R脚本\n\n```sh\n#!/usr/bin/Rscript --slave\nargv <- commandArgs(TRUE)\nx <- as.numeric(argv[1])\n```\n\n然后：sudo chmod +x file.r\n\n","slug":"R/r编码规范","updated":1411873728000,"excerpt":"","_id":"8t0ni847r5cducro","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"R资源列表","date":1377619200000,"tags":["87odq62tjhx83yb8"],"content":"<h2 id=\"文档\">文档</h2>\n<p>R扩展：<a href=\"http://cran.r-project.org/doc/manuals/R-exts.html\" target=\"_blank\" rel=\"external\">http://cran.r-project.org/doc/manuals/R-exts.html</a></p>\n<h2 id=\"文章\">文章</h2>\n<p>炼数成金 R中国用户组<a href=\"http://r.dataguru.cn/\" target=\"_blank\" rel=\"external\">http://r.dataguru.cn/</a><br>编写R包C扩展的核心指引<a href=\"http://www.dataguru.cn/article-1178-1.html\" target=\"_blank\" rel=\"external\">http://www.dataguru.cn/article-1178-1.html</a><br>关于在R programming中避免显式循环的一些方法<a href=\"http://www.dataguru.cn/article-3284-1.html\" target=\"_blank\" rel=\"external\">http://www.dataguru.cn/article-3284-1.html</a></p>\n<h2 id=\"书籍刊物\">书籍刊物</h2>\n<p>数据科学<a href=\"http://kan.weibo.com/kan/3444217594966746\" target=\"_blank\" rel=\"external\">http://kan.weibo.com/kan/3444217594966746</a><br>R语言小站<a href=\"http://kan.weibo.com/kan/3484733640942053\" target=\"_blank\" rel=\"external\">http://kan.weibo.com/kan/3484733640942053</a></p>\n<h2 id=\"课程\">课程</h2>\n<p>北美18名校的数据挖掘，数据分析，人工智能及机器学习课程汇总<a href=\"http://kan.weibo.com/con/3547413957114530?_from=text\" target=\"_blank\" rel=\"external\">http://kan.weibo.com/con/3547413957114530?_from=text</a></p>\n","source":"_posts/R/r资源列表.md","raw":"title: \"R资源列表\"\ndate: 2013/8/28\ntags: \n- R\n\n---\n\n## 文档\n\nR扩展：<http://cran.r-project.org/doc/manuals/R-exts.html>\n\n\n## 文章\n\n炼数成金 R中国用户组<http://r.dataguru.cn/>\n编写R包C扩展的核心指引<http://www.dataguru.cn/article-1178-1.html>\n关于在R programming中避免显式循环的一些方法<http://www.dataguru.cn/article-3284-1.html>\n\n## 书籍刊物\n\n数据科学<http://kan.weibo.com/kan/3444217594966746>\nR语言小站<http://kan.weibo.com/kan/3484733640942053>\n\n## 课程\n\n北美18名校的数据挖掘，数据分析，人工智能及机器学习课程汇总<http://kan.weibo.com/con/3547413957114530?_from=text>\n\n\n\n","slug":"R/r资源列表","updated":1411873728000,"excerpt":"","_id":"hmrgqiknc3ysrs1j","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"一段R程序的优化","date":1376323200000,"tags":["87odq62tjhx83yb8","bhntdczjvhsdvypb","nb244p6h3907avgk","h3jrpf97ovb8tzjx"],"content":"<h2 id=\"R性能优化\">R性能优化</h2>\n<p>原程序：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">CaiAnalyseEiMac &lt;- <span class=\"keyword\">function</span>(x) {</div><div class=\"line\">  <span class=\"comment\"># 分析应用中，一个mac对应多个imei地址的情况</span></div><div class=\"line\">  <span class=\"comment\">#</span></div><div class=\"line\">  <span class=\"comment\"># Args:</span></div><div class=\"line\">  <span class=\"comment\">#   x: list类型，待分析数据</span></div><div class=\"line\">  <span class=\"comment\">#     x$aid: 应用ID，格式例如：aid=23。（下面的格式也类同）</span></div><div class=\"line\">  <span class=\"comment\">#     x$ei:  imei列表</span></div><div class=\"line\">  <span class=\"comment\">#     x$mac: mac列表</span></div><div class=\"line\">  <span class=\"comment\"># Return:</span></div><div class=\"line\">  <span class=\"comment\">#   list，对应多个imei的mac的占比</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\"># 格式化应用数据</span></div><div class=\"line\">  x$aid &lt;- substr(x$aid, <span class=\"number\">5</span>, <span class=\"number\">100</span>)</div><div class=\"line\">  n &lt;- length(x$aid)</div><div class=\"line\">  aid.lst &lt;- unique(x$aid)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\"># 计算总体一个mac对应多个imei的情况</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\"># 初始化</span></div><div class=\"line\">  tmp.lst &lt;- list()</div><div class=\"line\">  mac.unique &lt;- unique(x$mac)</div><div class=\"line\">  <span class=\"keyword\">for</span> (mac <span class=\"keyword\">in</span> mac.unique) {</div><div class=\"line\">    tmp.lst[[mac]] &lt;- c()</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\"># 把imei都加入mac列表</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>:n) {</div><div class=\"line\">    tmp.lst[[x$mac[i]]] &lt;- c(tmp.lst[[x$mac[i]]], x$ei[i])</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\"># 汇总唯一值的个数</span></div><div class=\"line\">  tmp.lst &lt;- lapply(tmp.lst, FUN=<span class=\"keyword\">function</span>(x){<span class=\"keyword\">return</span>(length(unique(x)))})</div><div class=\"line\">  </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>因为数据量比较大，在工作的机器上跑的时间超过半小时。。。。主要原因有两个：</p>\n<ul>\n<li>copy-on-change，这是R的机制，循环里有大量的修改list操作；</li>\n<li>R的循环效率比较低</li>\n</ul>\n<p>后来发现tapply函数可以达到目的，主要代码如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tmp.lst &lt;- tapply(x<span class=\"variable\">$mac</span>, x<span class=\"variable\">$ei</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span><span class=\"title\">length</span><span class=\"params\">(unique<span class=\"params\">(x)</span>)</span>)</span></div></pre></td></tr></table></figure>\n\n<p>非常的简洁，而且时间消耗就几秒而已。</p>\n","source":"_posts/R/一段R程序的优化.md","raw":"title: 一段R程序的优化\ndate: 2013/8/13\ntags : \n- R\n- 性能优化\n- tapply\n- 向量化运算\n\n---\n\n## R性能优化\n\n原程序：\n\n```r\nCaiAnalyseEiMac <- function(x) {\n  # 分析应用中，一个mac对应多个imei地址的情况\n  #\n  # Args:\n  #   x: list类型，待分析数据\n  #     x$aid: 应用ID，格式例如：aid=23。（下面的格式也类同）\n  #     x$ei:  imei列表\n  #     x$mac: mac列表\n  # Return:\n  #   list，对应多个imei的mac的占比\n  \n  # 格式化应用数据\n  x$aid <- substr(x$aid, 5, 100)\n  n <- length(x$aid)\n  aid.lst <- unique(x$aid)\n  \n  # 计算总体一个mac对应多个imei的情况\n  \n  # 初始化\n  tmp.lst <- list()\n  mac.unique <- unique(x$mac)\n  for (mac in mac.unique) {\n    tmp.lst[[mac]] <- c()\n  }\n  \n  # 把imei都加入mac列表\n  for (i in 1:n) {\n    tmp.lst[[x$mac[i]]] <- c(tmp.lst[[x$mac[i]]], x$ei[i])\n  }\n  \n  # 汇总唯一值的个数\n  tmp.lst <- lapply(tmp.lst, FUN=function(x){return(length(unique(x)))})\n  \n}\n```\n\n因为数据量比较大，在工作的机器上跑的时间超过半小时。。。。主要原因有两个：\n\n* copy-on-change，这是R的机制，循环里有大量的修改list操作；\n* R的循环效率比较低\n\n后来发现tapply函数可以达到目的，主要代码如下：\n\n```\ntmp.lst <- tapply(x$mac, x$ei, function(x)length(unique(x)))\n```\n\n非常的简洁，而且时间消耗就几秒而已。\n","slug":"R/一段R程序的优化","updated":1411873728000,"excerpt":"","_id":"9fj8sd0g3unmky8m","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用R来获取网易公开课的下载地址","date":1377792000000,"tags":["87odq62tjhx83yb8"],"content":"<p>今天看到一个网易公开课的课程，想把它们下载下来，所以写了一个脚本去分析页面结构，把title和url解析出来。</p>\n<p>脚本见<a href=\"https://github.com/cyy0523xc/R/blob/master/lib/cai_get_download_url.r\" target=\"_blank\" rel=\"external\">https://github.com/cyy0523xc/R/blob/master/lib/cai_get_download_url.r</a></p>\n<p>其他页面的数据应该也是一样的。</p>\n","source":"_posts/R/使用R来获取网易公开课的下载地址.md","raw":"title: \"使用R来获取网易公开课的下载地址\"\ndate: 2013/8/30\ntags: \n- R\n\n---\n\n今天看到一个网易公开课的课程，想把它们下载下来，所以写了一个脚本去分析页面结构，把title和url解析出来。\n\n脚本见<https://github.com/cyy0523xc/R/blob/master/lib/cai_get_download_url.r>\n\n其他页面的数据应该也是一样的。\n","slug":"R/使用R来获取网易公开课的下载地址","updated":1411873728000,"excerpt":"","_id":"pnnsi913r2jmovlp","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在PHP中近似实现AOP思想","tags":["xscyqp84sjafy5s7","3siv6yohtv1v7i0k"],"date":1411010143000,"categories":[],"content":"<h2 id=\"简介\">简介</h2>\n<p><strong>AOP</strong> 为Aspect Oriented Programming的缩写，意为： <strong>面向切面编程</strong> ，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<p><strong>主要的功能</strong> 是：日志记录，性能统计，安全控制，事务处理，异常处理等等。</p>\n<p><strong> 主要的意图</strong> 是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p>\n<h2 id=\"PHP实现\">PHP实现</h2>\n<p>PHP的原生内核并没有相关的实现，不过借助魔术函数可以近似实现。</p>\n<p>下面的代码主要实现了对实现了对业务类的包装：</p>\n<ul>\n<li>定义了两个层次的前置和后置函数：可以全局的（类层面的所有action），也可以局部的（对某个action的）</li>\n<li>允许继承</li>\n</ul>\n<p>代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * 业务逻辑类的包装类</div><div class=\"line\"> *</div><div class=\"line\"> * 执行顺序：</div><div class=\"line\"> * 1. 全局前置函数</div><div class=\"line\"> * 2. 局部前置函数</div><div class=\"line\"> * 3. 业务逻辑</div><div class=\"line\"> * 4. 局部后置函数</div><div class=\"line\"> * 5. 全局后置函数</div><div class=\"line\"> *</div><div class=\"line\"> *<span class=\"phpdoc\"> @author</span> cyy0523xc@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AOP</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$instance</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 全局的前置函数和后置函数</span></div><div class=\"line\">    <span class=\"comment\">// 每个action调用时都会调用</span></div><div class=\"line\">    <span class=\"comment\">// @todo 可以在配置文件配置</span></div><div class=\"line\">    <span class=\"keyword\">const</span> GLOBAL_BEFORE_FUNC = <span class=\"string\">'_before'</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> GLOBAL_AFTER_FUNC  = <span class=\"string\">'_after'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 特定action的前置函数和后置函数的前缀</span></div><div class=\"line\">    <span class=\"keyword\">const</span> LOCAL_BEFORE_PRE   = <span class=\"string\">'_before_'</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> LOCAL_AFTER_PRE    = <span class=\"string\">'_after_'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(<span class=\"variable\">$instance</span>)</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"variable\">$this</span><span class=\"variable\">-&gt;instance</span> = <span class=\"variable\">$instance</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span><span class=\"params\">(<span class=\"variable\">$method</span>, <span class=\"variable\">$params</span>)</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable\">$this</span><span class=\"variable\">-&gt;__hasMethod</span>(<span class=\"variable\">$method</span>)) {</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"Call undefinded method \"</span> . get_class(<span class=\"variable\">$this</span><span class=\"variable\">-&gt;instance</span>) . <span class=\"string\">\"::$method\"</span>);</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用全局前置函数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$this</span><span class=\"variable\">-&gt;__hasMethod</span>(AOP::GLOBAL_BEFORE_FUNC)) {</div><div class=\"line\">            <span class=\"variable\">$this</span><span class=\"variable\">-&gt;__callMethod</span>(AOP::GLOBAL_BEFORE_FUNC);</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用前置函数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$this</span><span class=\"variable\">-&gt;__hasMethod</span>(AOP::LOCAL_BEFORE_PRE . <span class=\"variable\">$method</span>)) {</div><div class=\"line\">            <span class=\"variable\">$this</span><span class=\"variable\">-&gt;__callMethod</span>(AOP::LOCAL_BEFORE_PRE . <span class=\"variable\">$method</span>);</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用业务函数</span></div><div class=\"line\">        <span class=\"variable\">$return</span> = <span class=\"variable\">$this</span><span class=\"variable\">-&gt;__callMethod</span>(<span class=\"variable\">$method</span>, <span class=\"variable\">$params</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用局部后置函数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$this</span><span class=\"variable\">-&gt;__hasMethod</span>(AOP::LOCAL_AFTER_PRE . <span class=\"variable\">$method</span>)) {</div><div class=\"line\">            <span class=\"variable\">$this</span><span class=\"variable\">-&gt;__callMethod</span>(AOP::LOCAL_AFTER_PRE . <span class=\"variable\">$method</span>);</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用全局后置函数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$this</span><span class=\"variable\">-&gt;__hasMethod</span>(AOP::GLOBAL_AFTER_FUNC)) {</div><div class=\"line\">            <span class=\"variable\">$this</span><span class=\"variable\">-&gt;__callMethod</span>(AOP::GLOBAL_AFTER_FUNC);</div><div class=\"line\">        }</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$return</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 判断方法是否存在</div><div class=\"line\">     * 使用双下划线前缀主要是为了避免冲突</div><div class=\"line\">     *<span class=\"phpdoc\"> @param</span> string $method 方法名</div><div class=\"line\">     *<span class=\"phpdoc\"> @return</span> mixed</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__hasMethod</span><span class=\"params\">(<span class=\"variable\">$method</span>)</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span> method_exists(<span class=\"variable\">$this</span><span class=\"variable\">-&gt;instance</span>, <span class=\"variable\">$method</span>);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 调用方法</div><div class=\"line\">     *<span class=\"phpdoc\"> @param</span> string $method 方法名</div><div class=\"line\">     *<span class=\"phpdoc\"> @param</span> array  $params 参数数组</div><div class=\"line\">     *<span class=\"phpdoc\"> @return</span> mixed</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__callMethod</span><span class=\"params\">(<span class=\"variable\">$method</span>, array <span class=\"variable\">$params</span> = null)</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"variable\">$callBack</span> = <span class=\"keyword\">array</span>(</div><div class=\"line\">            <span class=\"variable\">$this</span><span class=\"variable\">-&gt;instance</span>,</div><div class=\"line\">            <span class=\"variable\">$method</span></div><div class=\"line\">        );</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> === <span class=\"variable\">$params</span>) {</div><div class=\"line\">            <span class=\"keyword\">return</span> call_user_func(<span class=\"variable\">$callBack</span>);</div><div class=\"line\">        } <span class=\"keyword\">else</span> {</div><div class=\"line\">            <span class=\"keyword\">return</span> call_user_func_array(<span class=\"variable\">$callBack</span>, <span class=\"variable\">$params</span>);</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>源码文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/cyy0523xc/code/raw/master/php/test/aop.php -O aop.php</div></pre></td></tr></table></figure>\n\n","source":"_posts/php/在PHP中近似实现AOP思想.md","raw":"title: 在PHP中近似实现AOP思想\ntags:\n  - PHP \n  - AOP \ndate: 2014-09-18 11:15:43\ncategories: \n\n---\n\n## 简介\n\n**AOP** 为Aspect Oriented Programming的缩写，意为： **面向切面编程** ，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。\n\n**主要的功能** 是：日志记录，性能统计，安全控制，事务处理，异常处理等等。\n\n** 主要的意图** 是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。\n\n## PHP实现 \n\nPHP的原生内核并没有相关的实现，不过借助魔术函数可以近似实现。\n\n下面的代码主要实现了对实现了对业务类的包装：\n\n- 定义了两个层次的前置和后置函数：可以全局的（类层面的所有action），也可以局部的（对某个action的）\n- 允许继承\n\n代码如下：\n\n<!--more-->\n\n```php \n/** \n * 业务逻辑类的包装类\n *\n * 执行顺序：\n * 1. 全局前置函数\n * 2. 局部前置函数\n * 3. 业务逻辑\n * 4. 局部后置函数\n * 5. 全局后置函数\n *\n * @author cyy0523xc@gmail.com\n */\nfinal class AOP\n{\n    private $instance;\n\n    // 全局的前置函数和后置函数\n    // 每个action调用时都会调用\n    // @todo 可以在配置文件配置\n    const GLOBAL_BEFORE_FUNC = '_before';\n    const GLOBAL_AFTER_FUNC  = '_after';\n\n    // 特定action的前置函数和后置函数的前缀\n    const LOCAL_BEFORE_PRE   = '_before_';\n    const LOCAL_AFTER_PRE    = '_after_';\n\n    public function __construct($instance)\n    {\n        $this->instance = $instance;\n    }\n\n    public function __call($method, $params)\n    {\n        if (!$this->__hasMethod($method)) {\n            throw new Exception(\"Call undefinded method \" . get_class($this->instance) . \"::$method\");\n        }\n\n        // 调用全局前置函数\n        if ($this->__hasMethod(AOP::GLOBAL_BEFORE_FUNC)) {\n            $this->__callMethod(AOP::GLOBAL_BEFORE_FUNC);\n        }\n\n        // 调用前置函数\n        if ($this->__hasMethod(AOP::LOCAL_BEFORE_PRE . $method)) {\n            $this->__callMethod(AOP::LOCAL_BEFORE_PRE . $method);\n        }\n\n        // 调用业务函数\n        $return = $this->__callMethod($method, $params);\n\n        // 调用局部后置函数\n        if ($this->__hasMethod(AOP::LOCAL_AFTER_PRE . $method)) {\n            $this->__callMethod(AOP::LOCAL_AFTER_PRE . $method);\n        }\n\n        // 调用全局后置函数\n        if ($this->__hasMethod(AOP::GLOBAL_AFTER_FUNC)) {\n            $this->__callMethod(AOP::GLOBAL_AFTER_FUNC);\n        }\n        \n        return $return;\n    }\n\n    /**\n     * 判断方法是否存在\n     * 使用双下划线前缀主要是为了避免冲突\n     * @param string $method 方法名\n     * @return mixed\n     */\n    private function __hasMethod($method)\n    {\n        return method_exists($this->instance, $method);\n    }\n\n    /**\n     * 调用方法\n     * @param string $method 方法名\n     * @param array  $params 参数数组\n     * @return mixed\n     */\n    private function __callMethod($method, array $params = null)\n    {\n        $callBack = array(\n            $this->instance,\n            $method\n        );\n\n        if (null === $params) {\n            return call_user_func($callBack);\n        } else {\n            return call_user_func_array($callBack, $params);\n        }\n    }\n}\n\n```\n\n源码文件：\n\n```\nwget https://github.com/cyy0523xc/code/raw/master/php/test/aop.php -O aop.php  \n```\n\n","slug":"php/在PHP中近似实现AOP思想","updated":1411873728000,"excerpt":"<h2 id=\"简介\">简介</h2>\n<p><strong>AOP</strong> 为Aspect Oriented Programming的缩写，意为： <strong>面向切面编程</strong> ，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\n<p><strong>主要的功能</strong> 是：日志记录，性能统计，安全控制，事务处理，异常处理等等。</p>\n<p><strong> 主要的意图</strong> 是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p>\n<h2 id=\"PHP实现\">PHP实现</h2>\n<p>PHP的原生内核并没有相关的实现，不过借助魔术函数可以近似实现。</p>\n<p>下面的代码主要实现了对实现了对业务类的包装：</p>\n<ul>\n<li>定义了两个层次的前置和后置函数：可以全局的（类层面的所有action），也可以局部的（对某个action的）</li>\n<li>允许继承</li>\n</ul>\n<p>代码如下：</p>\n","_id":"xvfkyqmps2e5uyit","comments":true,"layout":"post","photos":[],"link":""},{"title":"rsync命令","date":1377792000000,"tags":["q55i296h4b94lla2","yoyavjalgmttvr3s","gsvgq19jzwawa985"],"content":"<p>从远程服务器复制文件到本地服务器以前通常会使用scp命令，例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -<span class=\"constant\">P</span> <span class=\"number\">3000</span> user<span class=\"variable\">@host</span><span class=\"symbol\">:/data2/bak/</span><span class=\"number\">20130801</span>/part-* <span class=\"regexp\">/home/windows</span><span class=\"regexp\">/data/</span><span class=\"number\">20130825</span>/</div></pre></td></tr></table></figure>\n\n<p>不过用脚本跑的时候，发现得到的文件不齐全，有些文件不知道为什么没有下载到本地，所以寻找可以不覆盖更新的命令。本以为scp有这样的参数的，不过没发现。后来就使用rsync命令了，如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rsync -aPuv <span class=\"string\">'-e ssh -p 3000'</span> user<span class=\"variable\">@host</span><span class=\"symbol\">:/data2/bak/</span><span class=\"number\">20130825</span>/part-* <span class=\"regexp\">/home/windows</span><span class=\"regexp\">/data/</span><span class=\"number\">20130825</span>/</div></pre></td></tr></table></figure>\n\n<p>rsync的参数解释：</p>\n<ul>\n<li>P：显示进度条信息</li>\n<li>u：update，只返回不同的文件</li>\n</ul>\n<p>扩展：<a href=\"http://www.howtocn.org/rsync:use_rsync\" target=\"_blank\" rel=\"external\">http://www.howtocn.org/rsync:use_rsync</a></p>\n","source":"_posts/shell/rsync命令.md","raw":"title: \"rsync命令\"\ndate: 2013/8/30\ntags: \n- linux\n- rsync\n- scp\n\n---\n\n从远程服务器复制文件到本地服务器以前通常会使用scp命令，例如：\n\n```\nscp -P 3000 user@host:/data2/bak/20130801/part-* /home/windows/data/20130825/\n```\n\n不过用脚本跑的时候，发现得到的文件不齐全，有些文件不知道为什么没有下载到本地，所以寻找可以不覆盖更新的命令。本以为scp有这样的参数的，不过没发现。后来就使用rsync命令了，如：\n\n```\nrsync -aPuv '-e ssh -p 3000' user@host:/data2/bak/20130825/part-* /home/windows/data/20130825/\n```\n\nrsync的参数解释：\n\n* P：显示进度条信息\n* u：update，只返回不同的文件\n\n扩展：<http://www.howtocn.org/rsync:use_rsync>\n","slug":"shell/rsync命令","updated":1411873728000,"excerpt":"","_id":"ykddftfv40sygeq6","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"sed命令","date":1378310400000,"tags":["q55i296h4b94lla2","2745h8v4m70nprvz"],"content":"<h2 id=\"问题\">问题</h2>\n<p>源数据：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">28</span>&<span class=\"variable\">at=</span><span class=\"number\">7</span>&<span class=\"variable\">cid=</span>mDamz1b7WRJZ</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">29</span>&<span class=\"variable\">at=</span><span class=\"number\">3</span>&<span class=\"variable\">cid=</span>Q4ETETM9Hjx0</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">39</span>&<span class=\"variable\">at=</span><span class=\"number\">0</span>&<span class=\"variable\">cid=</span>ytBSubxEaFN6</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">40</span>&<span class=\"variable\">at=</span><span class=\"number\">3</span>&<span class=\"variable\">cid=</span>mDamz1b7WRJZ</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">42</span>&<span class=\"variable\">at=</span><span class=\"number\">6</span>&<span class=\"variable\">cid=</span>ytBSubxEaFN6</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">42</span>&<span class=\"variable\">at=</span><span class=\"number\">3</span>&<span class=\"variable\">cid=</span>mDamz1b7WRJZ</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">45</span>&<span class=\"variable\">at=</span><span class=\"number\">0</span>&<span class=\"variable\">cid=</span><span class=\"number\">66</span>OwWFuVBMSS</div></pre></td></tr></table></figure>\n\n<p>希望把drt字段中的+号及后面的替换掉：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed 's/<span class=\"command\">\\+</span><span class=\"special\">[</span><span class=\"command\">\\d</span>:<span class=\"special\">]</span>+<span class=\"special\">&</span>/<span class=\"special\">&</span>/g'</div></pre></td></tr></table></figure>\n\n<p>结果就是死活不工作。。。</p>\n<h2 id=\"解决\">解决</h2>\n<p>原来&amp;在sed中也是元字符，之前从来没注意到这个，和普通正则还差异多多。最后就只是一个转义符的事情：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed 's/<span class=\"command\">\\+</span>/<span class=\"command\">\\&</span>/g'</div></pre></td></tr></table></figure>\n\n<p>关于&amp;的说明：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">保存搜索字符用来替换其他字符，如s/love<span class=\"javadoc\">/**&**/</span>，love这成**love**。</div></pre></td></tr></table></figure>\n\n<p>还有：</p>\n<ul>\n<li>sed的元字符里原来没有+号的。。。</li>\n<li>\\d发现也是无效的</li>\n</ul>\n<p>最终就变成了：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sed 's/+<span class=\"special\">[</span>0-9:<span class=\"special\">]</span>*<span class=\"command\">\\&</span>/<span class=\"command\">\\&</span>/g'</div></pre></td></tr></table></figure>\n\n<h2 id=\"附录\">附录</h2>\n<ul>\n<li>sed的元字符：<a href=\"http://tsnc.zhongaokao.com/tsnc_wgrj/doc/sed.htm#id2810450\" target=\"_blank\" rel=\"external\">http://tsnc.zhongaokao.com/tsnc_wgrj/doc/sed.htm#id2810450</a></li>\n<li>sed manual：<a href=\"http://www.gnu.org/software/sed/manual/sed.html\" target=\"_blank\" rel=\"external\">http://www.gnu.org/software/sed/manual/sed.html</a></li>\n<li>grep、sed、awk、perl等对正则表达式的支持的差别：<a href=\"http://blog.csdn.net/zouxue138/article/details/8620799\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zouxue138/article/details/8620799</a></li>\n</ul>\n","source":"_posts/shell/sed命令.md","raw":"title: \"sed命令\"\ndate: 2013/9/5\ntags: \n- linux\n- sed\n\n---\n\n\n## 问题\n\n源数据：\n\n```\ndrt=2013-09-02+22:14:28&at=7&cid=mDamz1b7WRJZ\ndrt=2013-09-02+22:14:29&at=3&cid=Q4ETETM9Hjx0\ndrt=2013-09-02+22:14:39&at=0&cid=ytBSubxEaFN6\ndrt=2013-09-02+22:14:40&at=3&cid=mDamz1b7WRJZ\ndrt=2013-09-02+22:14:42&at=6&cid=ytBSubxEaFN6\ndrt=2013-09-02+22:14:42&at=3&cid=mDamz1b7WRJZ\ndrt=2013-09-02+22:14:45&at=0&cid=66OwWFuVBMSS\n```\n\n希望把drt字段中的+号及后面的替换掉：\n\n```\nsed 's/\\+[\\d:]+&/&/g'\n```\n\n结果就是死活不工作。。。\n\n## 解决\n\n原来&在sed中也是元字符，之前从来没注意到这个，和普通正则还差异多多。最后就只是一个转义符的事情：\n\n```\nsed 's/\\+/\\&/g'\n```\n\n关于&的说明：\n\n```\n保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。\n```\n\n还有：\n\n* sed的元字符里原来没有+号的。。。\n* \\d发现也是无效的\n\n最终就变成了：\n\n```\nsed 's/+[0-9:]*\\&/\\&/g'\n```\n\n## 附录\n\n* sed的元字符：<http://tsnc.zhongaokao.com/tsnc_wgrj/doc/sed.htm#id2810450>\n* sed manual：<http://www.gnu.org/software/sed/manual/sed.html>\n* grep、sed、awk、perl等对正则表达式的支持的差别：<http://blog.csdn.net/zouxue138/article/details/8620799>\n","slug":"shell/sed命令","updated":1411873728000,"excerpt":"","_id":"mmuuv3vhkk5en3e9","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"shell命令自动补全","tags":["9c5w52cmsu43bufs"],"date":1411369333000,"categories":[],"content":"<p>代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># github相关操作 </span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">github</span></span>() {</div><div class=\"line\">    <span class=\"built_in\">cd</span>_github_code</div><div class=\"line\">    my_github=git@github.com/cyy053xc/</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span> </div><div class=\"line\">        <span class=\"string\">\"c\"</span>|<span class=\"string\">\"clone\"</span>)</div><div class=\"line\">            git clone <span class=\"variable\">$my_github</span><span class=\"variable\">$2</span><span class=\"string\">\".git\"</span></div><div class=\"line\">            ;;</div><div class=\"line\">        <span class=\"string\">\"l\"</span>|<span class=\"string\">\"pull\"</span>)</div><div class=\"line\">            <span class=\"built_in\">pushd</span> <span class=\"variable\">$my_github</span><span class=\"variable\">$2</span></div><div class=\"line\">            git pull</div><div class=\"line\">            <span class=\"built_in\">popd</span></div><div class=\"line\">            ;;</div><div class=\"line\">        <span class=\"string\">\"s\"</span>|<span class=\"string\">\"push\"</span>)</div><div class=\"line\">            <span class=\"built_in\">pushd</span> <span class=\"variable\">$my_github</span><span class=\"variable\">$2</span></div><div class=\"line\">            git pull </div><div class=\"line\">            git commit -am <span class=\"string\">'script commit'</span></div><div class=\"line\">            git push </div><div class=\"line\">            <span class=\"built_in\">popd</span></div><div class=\"line\">            ;;</div><div class=\"line\">        <span class=\"string\">\"h\"</span>|<span class=\"string\">\"help\"</span>|*)</div><div class=\"line\">            cat &lt;&lt;EOF</div><div class=\"line\">github [hcls] [path] </div><div class=\"line\"></div><div class=\"line\">usage:</div><div class=\"line\">h|<span class=\"built_in\">help</span>               : <span class=\"built_in\">help</span></div><div class=\"line\">c|clone  project     : git clone {<span class=\"variable\">$my_github</span>}project.git</div><div class=\"line\">l|pull   project     : git pull </div><div class=\"line\">s|push   project     : git push </div><div class=\"line\">EOF</div><div class=\"line\">            ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 补全函数</span></div><div class=\"line\">function <span class=\"function\"><span class=\"title\">_github</span></span>() {</div><div class=\"line\">    COMPREPLY=()</div><div class=\"line\">    local cur=<span class=\"variable\">${COMP_WORDS[COMP_CWORD]}</span>;</div><div class=\"line\">    local com=<span class=\"variable\">${COMP_WORDS[COMP_CWORD-1]}</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$com</span> <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"string\">'github'</span>)</div><div class=\"line\">            COMPREPLY=($(compgen -W <span class=\"string\">'c clone l pull s push h help'</span> -- <span class=\"variable\">$cur</span>))</div><div class=\"line\">            ;;</div><div class=\"line\">        <span class=\"string\">'compile'</span>)</div><div class=\"line\">            local pro=($(awk <span class=\"string\">'{print $1}'</span> project.list))</div><div class=\"line\">            COMPREPLY=($(compgen -W <span class=\"string\">'${pro[@]}'</span> -- <span class=\"variable\">$cur</span>))</div><div class=\"line\">            ;;</div><div class=\"line\">        *)</div><div class=\"line\">            ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 绑定自动补全函数</span></div><div class=\"line\">complete -F _github github</div></pre></td></tr></table></figure>\n\n<p>从效果上，可以说已经实现了tab键自动补全，不过不是很完美：</p>\n<ul>\n<li>每个函数需要搭配一个额外的补全函数</li>\n<li>补全函数的实现有大量的重复代码</li>\n<li>另外还需要一个额外的命令进行绑定</li>\n</ul>\n<p>理想的应该是：在函数的内部加上一条命令或者一个配置来解决。</p>\n","source":"_posts/shell/shell命令自动补全.md","raw":"title: shell命令自动补全\ntags:\n  - shell \ndate: 2014-09-22 15:02:13\ncategories:\n\n---\n\n代码如下：\n\n```bash\n# github相关操作 \ngithub() {\n    cd_github_code\n    my_github=git@github.com/cyy053xc/\n\n    case $1 in \n        \"c\"|\"clone\")\n            git clone $my_github$2\".git\"\n            ;;\n        \"l\"|\"pull\")\n            pushd $my_github$2\n            git pull\n            popd\n            ;;\n        \"s\"|\"push\")\n            pushd $my_github$2\n            git pull \n            git commit -am 'script commit'\n            git push \n            popd\n            ;;\n        \"h\"|\"help\"|*)\n            cat <<EOF\ngithub [hcls] [path] \n\nusage:\nh|help               : help\nc|clone  project     : git clone {$my_github}project.git\nl|pull   project     : git pull \ns|push   project     : git push \nEOF\n            ;;\n    esac\n}\n\n# 补全函数\nfunction _github() {\n    COMPREPLY=()\n    local cur=${COMP_WORDS[COMP_CWORD]};\n    local com=${COMP_WORDS[COMP_CWORD-1]};\n    case $com in\n        'github')\n            COMPREPLY=($(compgen -W 'c clone l pull s push h help' -- $cur))\n            ;;\n        'compile')\n            local pro=($(awk '{print $1}' project.list))\n            COMPREPLY=($(compgen -W '${pro[@]}' -- $cur))\n            ;;\n        *)\n            ;;\n    esac\n    return 0\n}\n\n# 绑定自动补全函数\ncomplete -F _github github \n\n```\n\n从效果上，可以说已经实现了tab键自动补全，不过不是很完美：\n\n- 每个函数需要搭配一个额外的补全函数\n- 补全函数的实现有大量的重复代码\n- 另外还需要一个额外的命令进行绑定\n\n理想的应该是：在函数的内部加上一条命令或者一个配置来解决。\n","slug":"shell/shell命令自动补全","updated":1411873728000,"excerpt":"","_id":"5t904yrk4dpdffkm","comments":true,"layout":"post","photos":[],"link":""},{"title":"shell记录","date":1410935347000,"categories":["mcqjzjczsmtmxrv7"],"tags":["9c5w52cmsu43bufs"],"content":"<h1 id=\"字符串参与条件判断或者计算时，必须加上双引号\">字符串参与条件判断或者计算时，必须加上双引号</h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$string</span>\"</span> ]; </div><div class=\"line\"></div><div class=\"line\">string=<span class=\"string\">\"test  test2\"</span></div><div class=\"line\">your_func <span class=\"variable\">$string</span>      <span class=\"comment\"># 错误：函数会接收到两个参数</span></div><div class=\"line\">your_func <span class=\"string\">\"<span class=\"variable\">$string</span>\"</span>    <span class=\"comment\"># 正常：函数正常接收到一个参数</span></div></pre></td></tr></table></figure>\n\n<p>注意： <strong>shell会把字符串按照IFS进行分割处理</strong></p>\n<h1 id=\"多行字符串：IFS换行符\">多行字符串：IFS换行符</h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifs=<span class=\"variable\">$IFS</span> </div><div class=\"line\">IFS=$`\\n`              <span class=\"comment\"># 注意这里，不能使用: IFS=\"\\n\" or IFS='\\n'</span></div><div class=\"line\">config=`cat &lt;&lt;EOF</div><div class=\"line\">output: .user.js</div><div class=\"line\"></div><div class=\"line\">dese:</div><div class=\"line\"><span class=\"comment\">// ==UserScript==</span></div><div class=\"line\"><span class=\"comment\">// @name         Userscript</span></div><div class=\"line\"><span class=\"comment\">// @namespace    http://cyy0523xc.github.io/</span></div><div class=\"line\"><span class=\"comment\">// @version      0.1</span></div><div class=\"line\"><span class=\"comment\">// @description  something </span></div><div class=\"line\"><span class=\"comment\">// @match        http://*/*</span></div><div class=\"line\"><span class=\"comment\">// @copyright    2014, Alex(cyy0523xc@gmail.com)</span></div><div class=\"line\"><span class=\"comment\">// ==/UserScript==</span></div><div class=\"line\">    </div><div class=\"line\">input: </div><div class=\"line\">- </div><div class=\"line\">   </div><div class=\"line\">EOF`</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$config</span></div><div class=\"line\">IFS=<span class=\"variable\">$ifs</span></div></pre></td></tr></table></figure>\n\n<h1 id=\"批量重命名文件\">批量重命名文件</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rename <span class=\"string\">'s/201[34]\\-[01][0-9]\\-[012][0-9]\\-//'</span> *.md</div></pre></td></tr></table></figure>\n\n<h1 id=\"期待一元表达式\">期待一元表达式</h1>\n<p>异常信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">bash</span>: <span class=\"string\">[: h: 期待一元表达式]</span></div></pre></td></tr></table></figure>\n\n<p>对应语句：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"h\"</span> = <span class=\"variable\">$1</span> ]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果变量未定义的话，则报错，应改成：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"h\"</span> = <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</div></pre></td></tr></table></figure>\n\n","source":"_posts/shell/shell记录.md","raw":"title: shell记录\ndate: 2014-09-17 14:29:07\ncategories: record\ntags:\n- shell \n\n---\n\n# 字符串参与条件判断或者计算时，必须加上双引号\n\n```\nif [ -n \"$string\" ]; \n\nstring=\"test  test2\"\nyour_func $string      # 错误：函数会接收到两个参数\nyour_func \"$string\"    # 正常：函数正常接收到一个参数\n```\n\n注意： **shell会把字符串按照IFS进行分割处理**\n\n# 多行字符串：IFS换行符\n\n```\nifs=$IFS \nIFS=$`\\n`              # 注意这里，不能使用: IFS=\"\\n\" or IFS='\\n'\nconfig=`cat <<EOF\noutput: .user.js\n\ndese:\n// ==UserScript==\n// @name         Userscript\n// @namespace    http://cyy0523xc.github.io/\n// @version      0.1\n// @description  something \n// @match        http://*/*\n// @copyright    2014, Alex(cyy0523xc@gmail.com)\n// ==/UserScript==\n    \ninput: \n- \n   \nEOF`\n\necho $config\nIFS=$ifs \n\n```\n\n# 批量重命名文件\n\n```bash\nrename 's/201[34]\\-[01][0-9]\\-[012][0-9]\\-//' *.md\n```\n\n# 期待一元表达式\n\n异常信息：\n\n```\nbash: [: h: 期待一元表达式]\n```\n\n对应语句：\n\n```shell \nif [ \"h\" = $1 ]\n\n# 如果变量未定义的话，则报错，应改成：\n\nif [ \"h\" = \"$1\" ]\n```\n\n\n","slug":"shell/shell记录","updated":1411873728000,"excerpt":"","_id":"l2xjfk9rjtu1twpt","comments":true,"layout":"post","photos":[],"link":""},{"title":"vimscript问题汇总","tags":["t73iw1pw9oyxq70c"],"date":1411354476000,"categories":["mcqjzjczsmtmxrv7"],"content":"<h2 id=\"source时提示“E484:_无法打开文件”\">source时提示“E484: 无法打开文件”</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> <span class=\"string\">'/home/code/github/code/vim/cyy.vim'</span></div></pre></td></tr></table></figure>\n\n<p>应该去掉路径中的单引号，如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>code<span class=\"regexp\">/github/</span>code<span class=\"regexp\">/vim/</span>cyy.vim</div></pre></td></tr></table></figure>\n\n","source":"_posts/vim/vimscript问题汇总.md","raw":"title: vimscript问题汇总\ntags:\n  - vim \ndate: 2014-09-22 10:54:36\ncategories: record\n\n---\n\n## source时提示“E484: 无法打开文件”\n\n```\nsource '/home/code/github/code/vim/cyy.vim'\n```\n\n应该去掉路径中的单引号，如下：\n\n```\nsource /home/code/github/code/vim/cyy.vim\n```\n\n\n\n\n","slug":"vim/vimscript问题汇总","updated":1411873728000,"excerpt":"","_id":"zidfpcdzj5ox3w0u","comments":true,"layout":"post","photos":[],"link":""},{"title":"vim中替换^M符号","date":1410513272000,"tags":["t73iw1pw9oyxq70c","q55i296h4b94lla2"],"content":"<p>在使用git pull时，发生文件冲突，合并冲突时，发现行尾显示了很多 <strong>^M</strong> 的符号。这是一个特殊符号，可以使用替换：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:%s/^M$//g</div></pre></td></tr></table></figure>\n\n<p>注意：命令中的 <strong>^M</strong> 需要用“ <strong>CTRL-V CTRL-M</strong> ” 生成。</p>\n","source":"_posts/vim/vim中替换-M符号.md","raw":"title: vim中替换^M符号\ndate: 2014-09-12 17:14:32\ntags:\n- vim\n- linux\n\n---\n\n在使用git pull时，发生文件冲突，合并冲突时，发现行尾显示了很多 **^M** 的符号。这是一个特殊符号，可以使用替换：\n\n```bash\n:%s/^M$//g\n```\n\n注意：命令中的 **^M** 需要用“ **CTRL-V CTRL-M** ” 生成。\n\n","slug":"vim/vim中替换-M符号","updated":1411873728000,"excerpt":"","_id":"i74xy3994llal21t","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"vim命令汇总","date":1408032000000,"tags":["q55i296h4b94lla2","t73iw1pw9oyxq70c"],"content":"<h3 id=\"vim_命令汇总\">vim 命令汇总</h3>\n<p><a href=\"http://www.cnblogs.com/softwaretesting/archive/2011/07/12/2104435.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/softwaretesting/archive/2011/07/12/2104435.html</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 单词操作</span></div><div class=\"line\">yw    复制单词</div><div class=\"line\">dw    删除单词</div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">n=</span>=   n行缩进</div><div class=\"line\"></div><div class=\"line\">.     重复刚才的命令</div><div class=\"line\">z+f % 折叠代码</div><div class=\"line\"></div><div class=\"line\">o     插入一个空行</div><div class=\"line\">CTRL+v, I, <span class=\"comment\">#, ESC    多行注释（#可以换成其他的，例如//）</span></div><div class=\"line\">      删除多行注释的方法，同样 Ctrl+v 进入列选择模式，移到光标把注释符选中，按下d，注释就被删除了</div></pre></td></tr></table></figure>\n\n","source":"_posts/vim/vim命令汇总.md","raw":"title: \"vim命令汇总\"\ndate: 2014/8/15\ntags: \n- linux\n- vim\n\n---\n\n\n### vim 命令汇总 \n\nhttp://www.cnblogs.com/softwaretesting/archive/2011/07/12/2104435.html\n\n```\n# 单词操作\nyw    复制单词\ndw    删除单词\n\nn==   n行缩进\n\n.     重复刚才的命令\nz+f % 折叠代码\n\no     插入一个空行\nCTRL+v, I, #, ESC    多行注释（#可以换成其他的，例如//）\n      删除多行注释的方法，同样 Ctrl+v 进入列选择模式，移到光标把注释符选中，按下d，注释就被删除了\n\n```\n\n\n\n\n","slug":"vim/vim命令汇总","updated":1411873728000,"excerpt":"","_id":"cyor6odt7yry363p","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"vim插件","tags":["t73iw1pw9oyxq70c"],"date":1411543110000,"categories":["mcqjzjczsmtmxrv7"],"content":"<h2 id=\"华丽的powerline\">华丽的powerline</h2>\n<p>下载插件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> ~/.<span class=\"keyword\">vim</span>/bundle/ </div><div class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/Lokaltog/<span class=\"keyword\">vim</span>-powerline</div></pre></td></tr></table></figure>\n\n<p>修改vim的配置文件：vim ~/.vimrc，加入下面几行：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\" powerline插件</span></div><div class=\"line\"><span class=\"keyword\">set</span> t_Co=<span class=\"number\">256</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:Powerline_symbols</span> = <span class=\"string\">'unicode'</span></div><div class=\"line\"><span class=\"keyword\">set</span> encoding=utf8</div></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/images/vim-powerline效果.jpg\" alt=\"vim-powerline\"></p>\n","source":"_posts/vim/vim插件.md","raw":"title: vim插件\ntags:\n  - vim\ndate: 2014-09-24 15:18:30\ncategories: record\n\n---\n\n## 华丽的powerline\n\n下载插件：\n\n```\ncd ~/.vim/bundle/ \ngit clone https://github.com/Lokaltog/vim-powerline \n```\n\n修改vim的配置文件：vim ~/.vimrc，加入下面几行：\n\n```\n\" powerline插件\nset t_Co=256\nlet g:Powerline_symbols = 'unicode'\nset encoding=utf8\n```\n\n效果如下：\n\n![vim-powerline](/images/vim-powerline效果.jpg)\n","slug":"vim/vim插件","updated":1411873728000,"excerpt":"","_id":"buwyf1mm4zo8z87c","comments":true,"layout":"post","photos":[],"link":""},{"title":"vim的模式","tags":["t73iw1pw9oyxq70c"],"date":1411025791000,"categories":[],"content":"<h2 id=\"通常模式(n)\">通常模式(n)</h2>\n<p>在其它任何一个模式下,用ESC或者 ctrl+c 键可以退到通常模式</p>\n<h2 id=\"插入模式(i)\">插入模式(i)</h2>\n<p>在这个模式下,vim像一个常见的编辑器.在通常模式下,用i或者a可以进行本模式,当然,还有一些其它命令也可以.</p>\n<h2 id=\"可视模式(v)\">可视模式(v)</h2>\n<p>在这个模式下,可以使用hjkl进行选择.然后进行copy,paste或者其它操作. 在通常模式下,用 <strong>v or shift+v</strong> 命令进行可视模式.</p>\n<h2 id=\"列块操作模式(V)\">列块操作模式(V)</h2>\n<p>这是块操作模式. 在通常模式下,用 <strong>ctrl+v</strong> 进入本模式.</p>\n<p>例如注释多行代码等（ <strong>I, #, ESC</strong> ）</p>\n<p>还有 <strong>行尾列块操作模式</strong> ：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gg, ctrl+v, <span class=\"constant\">G</span>, <span class=\"variable\">$,</span> <span class=\"constant\">A</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"修改模式(R)\">修改模式(R)</h2>\n<p>这是改写的模式.很多软件法用insert键来完成这个切换.在vim中,从通常模式用R即可进入改写模式.</p>\n","source":"_posts/vim/vim的模式.md","raw":"title: vim的模式\ntags:\n  - vim  \ndate: 2014-09-18 15:36:31\ncategories:\n\n---\n\n## 通常模式(n) \n\n在其它任何一个模式下,用ESC或者 ctrl+c 键可以退到通常模式\n\n## 插入模式(i) \n\n在这个模式下,vim像一个常见的编辑器.在通常模式下,用i或者a可以进行本模式,当然,还有一些其它命令也可以.\n\n## 可视模式(v)\n\n在这个模式下,可以使用hjkl进行选择.然后进行copy,paste或者其它操作. 在通常模式下,用 **v or shift+v** 命令进行可视模式.\n\n## 列块操作模式(V)\n\n这是块操作模式. 在通常模式下,用 **ctrl+v** 进入本模式.\n\n例如注释多行代码等（ **I, #, ESC** ）\n\n还有 **行尾列块操作模式** ：\n\n```\ngg, ctrl+v, G, $, A\n```\n\n## 修改模式(R) \n\n这是改写的模式.很多软件法用insert键来完成这个切换.在vim中,从通常模式用R即可进入改写模式.\n\n","slug":"vim/vim的模式","updated":1411873728000,"excerpt":"","_id":"tp3w9bqwaitptbka","comments":true,"layout":"post","photos":[],"link":""},{"title":"vim脚本vimscript","tags":["t73iw1pw9oyxq70c","wk5l56hnmsbewnu5"],"date":1411127744000,"categories":[],"content":"<p>Vim的脚本语言被称为Vimscript，是典型的动态式命令语言，提供一些常用的语言特征：变量、表达式、控制结构、内置函数、用户自定义函数、一级字符串、列表、字典、终端、文件IO、正则表达式模式匹配、异常和集成调试器等。<br>在学习Vimscript时，你可以学习Vim自带的Vimscript文档，打开Vim自带的Vimscript很简单，只需在Vim内部执行：help vim-script-intro（Normal模式下）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"执行vim脚本\">执行vim脚本</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在vim内部</span></div><div class=\"line\">:<span class=\"built_in\">source</span> ~/test.vim</div></pre></td></tr></table></figure>\n\n<h2 id=\"变量\">变量</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> {variable} = {expression}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">i =</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> i += <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">a =</span> i &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"语句\">语句</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># <span class=\"keyword\">if</span>-<span class=\"keyword\">else</span></span></div><div class=\"line\"><span class=\"keyword\">if</span> {condition}</div><div class=\"line\">    {statements}</div><div class=\"line\"><span class=\"keyword\">elseif</span> {condition}</div><div class=\"line\">    {statements}</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    {statements}</div><div class=\"line\"><span class=\"keyword\">endif</span><span class=\"preprocessor\"></span></div><div class=\"line\"></div><div class=\"line\"># while </div><div class=\"line\"><span class=\"keyword\">while</span> {condition}</div><div class=\"line\">    {statements}</div><div class=\"line\">endwhile<span class=\"preprocessor\"></span></div><div class=\"line\"></div><div class=\"line\"># 字符串匹配</div><div class=\"line\">a =~ b<span class=\"preprocessor\">   # 匹配</span></div><div class=\"line\">a !~ b<span class=\"preprocessor\">   # 不匹配</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"函数\">函数</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> {<span class=\"title\">name</span>}<span class=\"params\">({var1}, {var2}, ...)</span></span></div><div class=\"line\">    {body}</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">endfunction</span></span></div></pre></td></tr></table></figure>\n\n<p>在Vimscript中，用户自定义函数的函数名第一个字母必须大写，下面展示一个自定义的Min函数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>! <span class=\"title\">s</span>:<span class=\"title\">Min</span><span class=\"params\">(num1, num2)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> a:num1 &lt; a:num2</div><div class=\"line\">        let smaller = a:num1</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        let smaller = a:num2</div><div class=\"line\">    endif</div><div class=\"line\">    <span class=\"keyword\">return</span> smaller</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">endfunction</span></span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>function后面加上强制命令修饰符 <strong>!</strong> 表示该函数如果存在则替换，这样做是有必要的，假设该Min函数位于某个脚本文件中，如果没有加上强制命令修饰符，脚本文件被载入两次时会报错：函数已存在。</li>\n<li>Vimscript中有许多内置函数，大约超过200过，你可以在Vim内部输入 :help functions来学习。</li>\n</ul>\n<h2 id=\"list列表\">list列表</h2>\n<p>一个list包含一组有序的元素，和C++不同的是，Vimscript中list的每个元素可以为任意类型。元素通过索引访问，第一个元素的索引为0。list使用两个中括号包裹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1 创建list</span></div><div class=\"line\"><span class=\"built_in\">let</span> list1 = []</div><div class=\"line\"><span class=\"built_in\">let</span> list2 = [<span class=\"string\">'a'</span>, <span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2 list元素的访问</span></div><div class=\"line\"><span class=\"built_in\">let</span> list[<span class=\"number\">0</span>] = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"built_in\">echo</span> list[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 3 list增加新的元素</span></div><div class=\"line\"><span class=\"comment\"># 添加新的值到 list 的尾部</span></div><div class=\"line\">call add(list, val)</div><div class=\"line\"><span class=\"comment\"># 添加新的值到 list 的头部</span></div><div class=\"line\">call insert(list, val)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4 list删除元素</span></div><div class=\"line\"><span class=\"comment\"># 删除索引为 index 的元素并返回此元素</span></div><div class=\"line\">call remove(list, index)</div><div class=\"line\"><span class=\"comment\"># 删除索引为 startIndex 到 endIndex（含 endIndex）的元素</span></div><div class=\"line\"><span class=\"comment\"># 返回一个 list 包含了这些被删除的元素</span></div><div class=\"line\">call remove(list, startIndex, endIndex)</div><div class=\"line\"><span class=\"comment\"># 清空 list，这里索引 -1 对应 list 中最后一个元素</span></div><div class=\"line\">call remove(list, <span class=\"number\">0</span>, -<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 5 判断list是否为空</span></div><div class=\"line\">empty(list)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 6 获取list的大小</span></div><div class=\"line\"><span class=\"built_in\">echo</span> len(list)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 7 拷贝list</span></div><div class=\"line\"><span class=\"comment\"># 浅拷贝 list</span></div><div class=\"line\"><span class=\"built_in\">let</span> copyList = copy(list)</div><div class=\"line\"><span class=\"comment\"># 深拷贝 list</span></div><div class=\"line\"><span class=\"built_in\">let</span> deepCopyList = deepcopy(list)</div><div class=\"line\">call deepcopy()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 8 使用for遍历list</span></div><div class=\"line\"><span class=\"built_in\">let</span> list = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> list</div><div class=\"line\">    <span class=\"built_in\">echo</span> element</div><div class=\"line\">endfor</div></pre></td></tr></table></figure>\n\n<h2 id=\"dictionary\">dictionary</h2>\n<p>dictionary是一个关联数组。每个元素都有一个key和一个value，和C++中map类似，我们可以通过key来获取value。dictionary使用两个大括号包裹。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1 创建dictionary</span></div><div class=\"line\"><span class=\"string\">\" 创建一个空的 dictionary</span></div><div class=\"line\">let dict = {}</div><div class=\"line\">\" 创建一个非空的 dictionary</div><div class=\"line\"><span class=\"built_in\">let</span> dict = {<span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>, <span class=\"string\">'three'</span>: <span class=\"number\">3</span> }</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2 dictionary元素的访问和修改</span></div><div class=\"line\"><span class=\"built_in\">let</span> dict = {<span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>}</div><div class=\"line\"><span class=\"built_in\">echo</span> dict[<span class=\"string\">'one'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 3 dictionary元素的增加和删除</span></div><div class=\"line\"><span class=\"number\">2</span> <span class=\"built_in\">let</span> dict[key] = value</div><div class=\"line\"><span class=\"number\">4</span> unlet dict[key]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4 获取dictionary的大小</span></div><div class=\"line\"><span class=\"built_in\">echo</span> len(dict)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 5 使用for语句遍历一个dictionary</span></div><div class=\"line\"><span class=\"built_in\">let</span> dict = {<span class=\"string\">'one'</span>: <span class=\"number\">1</span>, <span class=\"string\">'two'</span>: <span class=\"number\">2</span>}</div><div class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> keys(dict)</div><div class=\"line\">    <span class=\"built_in\">echo</span> key</div><div class=\"line\">endfor</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 遍历时 key 是未排序的，如果希望按照一定顺序访问可以这么做：</span></div><div class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> sort(keys(dict))</div><div class=\"line\">    <span class=\"built_in\">echo</span> key</div><div class=\"line\">endfor</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># keys 函数用于返回一个 list，包含 dictionary 的所有 key</span></div><div class=\"line\"><span class=\"comment\"># values 函数用于返回一个 list，包含 dictionary 的所有 value</span></div><div class=\"line\"><span class=\"comment\"># items 函数用于返回一个 list，包含 dictionary 的 key-value 对</span></div><div class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> values(dict)</div><div class=\"line\">    <span class=\"built_in\">echo</span> value</div><div class=\"line\">endfor</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items(dict)</div><div class=\"line\">    <span class=\"built_in\">echo</span> item</div><div class=\"line\">endfor</div></pre></td></tr></table></figure>\n\n<h2 id=\"其他\">其他</h2>\n<p>查看内置函数的帮助：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:<span class=\"built_in\">help</span> <span class=\"built_in\">echo</span></div></pre></td></tr></table></figure>\n\n<p>调用外部命令，前面加 <strong>!</strong> 号。</p>\n<p>see: <a href=\"http://learnvimscriptthehardway.stevelosh.com/\" target=\"_blank\" rel=\"external\">http://learnvimscriptthehardway.stevelosh.com/</a></p>\n","source":"_posts/vim/vim脚本vimscript.md","raw":"title: vim脚本vimscript\ntags:\n  - vim \n  - vimscript\ndate: 2014-09-19 19:55:44\ncategories:\n\n---\n\nVim的脚本语言被称为Vimscript，是典型的动态式命令语言，提供一些常用的语言特征：变量、表达式、控制结构、内置函数、用户自定义函数、一级字符串、列表、字典、终端、文件IO、正则表达式模式匹配、异常和集成调试器等。\n在学习Vimscript时，你可以学习Vim自带的Vimscript文档，打开Vim自带的Vimscript很简单，只需在Vim内部执行：help vim-script-intro（Normal模式下）\n\n<!--more-->\n\n## 执行vim脚本\n\n```bash\n# 在vim内部\n:source ~/test.vim \n```\n\n## 变量\n\n```\nlet {variable} = {expression}\n\nlet i = 1\nlet i += 2\nlet a = i > 0 ? 1 : 0\n```\n\n## 语句\n\n```\n# if-else\nif {condition}\n    {statements}\nelseif {condition}\n    {statements}\nelse\n    {statements}\nendif\n\n# while \nwhile {condition}\n    {statements}\nendwhile\n\n# 字符串匹配\na =~ b   # 匹配\na !~ b   # 不匹配\n\n```\n\n## 函数\n\n```\nfunction {name}({var1}, {var2}, ...)\n    {body}\nendfunction\n```\n\n在Vimscript中，用户自定义函数的函数名第一个字母必须大写，下面展示一个自定义的Min函数\n\n```\nfunction! s:Min(num1, num2)\n    if a:num1 < a:num2\n        let smaller = a:num1\n    else\n        let smaller = a:num2\n    endif\n    return smaller\nendfunction\n```\n\n- function后面加上强制命令修饰符 **!** 表示该函数如果存在则替换，这样做是有必要的，假设该Min函数位于某个脚本文件中，如果没有加上强制命令修饰符，脚本文件被载入两次时会报错：函数已存在。\n- Vimscript中有许多内置函数，大约超过200过，你可以在Vim内部输入 :help functions来学习。\n\n## list列表\n\n一个list包含一组有序的元素，和C++不同的是，Vimscript中list的每个元素可以为任意类型。元素通过索引访问，第一个元素的索引为0。list使用两个中括号包裹。\n\n```bash \n# 1 创建list\nlet list1 = []\nlet list2 = ['a', 2]\n\n# 2 list元素的访问\nlet list[0] = 1\necho list[0]\n\n# 3 list增加新的元素\n# 添加新的值到 list 的尾部\ncall add(list, val)\n# 添加新的值到 list 的头部\ncall insert(list, val)\n\n# 4 list删除元素\n# 删除索引为 index 的元素并返回此元素\ncall remove(list, index)\n# 删除索引为 startIndex 到 endIndex（含 endIndex）的元素\n# 返回一个 list 包含了这些被删除的元素\ncall remove(list, startIndex, endIndex)\n# 清空 list，这里索引 -1 对应 list 中最后一个元素\ncall remove(list, 0, -1)\n\n# 5 判断list是否为空\nempty(list)\n\n# 6 获取list的大小\necho len(list)\n\n# 7 拷贝list\n# 浅拷贝 list\nlet copyList = copy(list)\n# 深拷贝 list\nlet deepCopyList = deepcopy(list)\ncall deepcopy()\n\n# 8 使用for遍历list\nlet list = ['one', 'two', 'three']\nfor element in list\n    echo element\nendfor\n```\n\n## dictionary\n\ndictionary是一个关联数组。每个元素都有一个key和一个value，和C++中map类似，我们可以通过key来获取value。dictionary使用两个大括号包裹。\n\n```\n# 1 创建dictionary\n\" 创建一个空的 dictionary\nlet dict = {}\n\" 创建一个非空的 dictionary\nlet dict = {'one': 1, 'two': 2, 'three': 3 }\n\n# 2 dictionary元素的访问和修改\nlet dict = {'one': 1, 'two': 2}\necho dict['one']\n\n# 3 dictionary元素的增加和删除\n2 let dict[key] = value\n4 unlet dict[key]\n\n# 4 获取dictionary的大小\necho len(dict)\n\n# 5 使用for语句遍历一个dictionary\nlet dict = {'one': 1, 'two': 2}\nfor key in keys(dict)\n    echo key\nendfor\n\n# 遍历时 key 是未排序的，如果希望按照一定顺序访问可以这么做：\nfor key in sort(keys(dict))\n    echo key\nendfor\n \n# keys 函数用于返回一个 list，包含 dictionary 的所有 key\n# values 函数用于返回一个 list，包含 dictionary 的所有 value\n# items 函数用于返回一个 list，包含 dictionary 的 key-value 对\nfor value in values(dict)\n    echo value\nendfor\n\nfor item in items(dict)\n    echo item\nendfor\n```\n\n## 其他\n\n查看内置函数的帮助：\n\n```\n:help echo \n```\n\n调用外部命令，前面加 **!** 号。\n\nsee: http://learnvimscriptthehardway.stevelosh.com/\n","slug":"vim/vim脚本vimscript","updated":1411873728000,"excerpt":"<p>Vim的脚本语言被称为Vimscript，是典型的动态式命令语言，提供一些常用的语言特征：变量、表达式、控制结构、内置函数、用户自定义函数、一级字符串、列表、字典、终端、文件IO、正则表达式模式匹配、异常和集成调试器等。<br>在学习Vimscript时，你可以学习Vim自带的Vimscript文档，打开Vim自带的Vimscript很简单，只需在Vim内部执行：help vim-script-intro（Normal模式下）</p>\n","_id":"ks5nsijnp2wdf3gd","comments":true,"layout":"post","photos":[],"link":""},{"title":"R中vector和names函数","date":1378310400000,"tags":["87odq62tjhx83yb8","0xiem69cb9n8nrq7","x470f00t4zl01qcr"],"content":"<h2 id=\"问题\">问题</h2>\n<p>源数据保存在文件中，格式如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">28</span>&<span class=\"variable\">at=</span><span class=\"number\">7</span>&<span class=\"variable\">cid=</span>mDamz1b7WRJZ</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">29</span>&<span class=\"variable\">at=</span><span class=\"number\">3</span>&<span class=\"variable\">cid=</span>Q4ETETM9Hjx0</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">39</span>&<span class=\"variable\">at=</span><span class=\"number\">0</span>&<span class=\"variable\">cid=</span>ytBSubxEaFN6</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">40</span>&<span class=\"variable\">at=</span><span class=\"number\">3</span>&<span class=\"variable\">cid=</span>mDamz1b7WRJZ</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">42</span>&<span class=\"variable\">at=</span><span class=\"number\">6</span>&<span class=\"variable\">cid=</span>ytBSubxEaFN6</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">42</span>&<span class=\"variable\">at=</span><span class=\"number\">3</span>&<span class=\"variable\">cid=</span>mDamz1b7WRJZ</div><div class=\"line\"><span class=\"variable\">drt=</span><span class=\"number\">2013</span>-<span class=\"number\">09</span>-<span class=\"number\">02</span>+<span class=\"number\">22</span>:<span class=\"number\">14</span>:<span class=\"number\">45</span>&<span class=\"variable\">at=</span><span class=\"number\">0</span>&<span class=\"variable\">cid=</span><span class=\"number\">66</span>OwWFuVBMSS</div></pre></td></tr></table></figure>\n\n<p>需要生成一个list，其下标是数据的字段名：drt，at，cid</p>\n<h2 id=\"解决\">解决</h2>\n<p>开始写成这样，很别扭的代码：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">x &lt;- scan(filename, what=<span class=\"string\">\"\"</span>, sep=<span class=\"string\">\"&\"</span>, nlines=<span class=\"number\">1</span>)</div><div class=\"line\">fields.name &lt;- sapply(x, FUN=<span class=\"keyword\">function</span>(x){strsplit(x, split=<span class=\"string\">\"=\"</span>)[[<span class=\"number\">1</span>]][<span class=\"number\">1</span>]})</div><div class=\"line\">names(fields.name) &lt;- <span class=\"literal\">NULL</span></div><div class=\"line\">names(fields.name) &lt;- fields.name</div><div class=\"line\">fields.name &lt;- as.list(fields.name)</div></pre></td></tr></table></figure>\n\n<p>借鉴tapply的源码，改成这样：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x &lt;- scan(filename, what=<span class=\"string\">\"\"</span>, sep=<span class=\"string\">\"&\"</span>, nlines=<span class=\"number\">1</span>)</div><div class=\"line\">fields.name &lt;- sapply(x, FUN=<span class=\"keyword\">function</span>(x){strsplit(x, split=<span class=\"string\">\"=\"</span>)[[<span class=\"number\">1</span>]][<span class=\"number\">1</span>]})</div><div class=\"line\">tmp.fields.name &lt;- vector(<span class=\"string\">\"list\"</span>, length(fields.name))    <span class=\"comment\"># 生成一个空的list</span></div><div class=\"line\">names(tmp.fields.name) &lt;- fields.name</div></pre></td></tr></table></figure>\n\n","source":"_posts/R/R中vector和names函数.md","raw":"title: \"R中vector和names函数\"\ndate: 2013/9/5\ntags: \n- R\n- vector\n- names\n\n---\n\n\n## 问题\n\n源数据保存在文件中，格式如下：\n\n```\ndrt=2013-09-02+22:14:28&at=7&cid=mDamz1b7WRJZ\ndrt=2013-09-02+22:14:29&at=3&cid=Q4ETETM9Hjx0\ndrt=2013-09-02+22:14:39&at=0&cid=ytBSubxEaFN6\ndrt=2013-09-02+22:14:40&at=3&cid=mDamz1b7WRJZ\ndrt=2013-09-02+22:14:42&at=6&cid=ytBSubxEaFN6\ndrt=2013-09-02+22:14:42&at=3&cid=mDamz1b7WRJZ\ndrt=2013-09-02+22:14:45&at=0&cid=66OwWFuVBMSS\n```\n\n需要生成一个list，其下标是数据的字段名：drt，at，cid\n\n\n## 解决\n\n开始写成这样，很别扭的代码：\n\n```r\n  x <- scan(filename, what=\"\", sep=\"&\", nlines=1)\n  fields.name <- sapply(x, FUN=function(x){strsplit(x, split=\"=\")[[1]][1]})\n  names(fields.name) <- NULL\n  names(fields.name) <- fields.name\n  fields.name <- as.list(fields.name)\n```\n\n借鉴tapply的源码，改成这样：\n\n```r\n  x <- scan(filename, what=\"\", sep=\"&\", nlines=1)\n  fields.name <- sapply(x, FUN=function(x){strsplit(x, split=\"=\")[[1]][1]})\n  tmp.fields.name <- vector(\"list\", length(fields.name))    # 生成一个空的list\n  names(tmp.fields.name) <- fields.name\n```\n","slug":"R/R中vector和names函数","updated":1411873728000,"excerpt":"","_id":"87sqvalp5vn05xki","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"R对数组指定下标顺序输出","date":1392048000000,"tags":["87odq62tjhx83yb8","9fbpbfydl3zthopy"],"content":"<h3 id=\"问题\">问题</h3>\n<figure class=\"highlight R\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; table(week.data[<span class=\"string\">'星期'</span>])</div><div class=\"line\"></div><div class=\"line\">星期二 星期六 星期日 星期三 星期四 星期五 星期一 </div><div class=\"line\">    <span class=\"number\">34</span>     <span class=\"number\">46</span>     <span class=\"number\">37</span>     <span class=\"number\">55</span>     <span class=\"number\">40</span>     <span class=\"number\">46</span>     <span class=\"number\">65</span></div></pre></td></tr></table></figure>\n\n<p>table函数可以统计各个值的频度，但是输出的顺序却不是我们所期待的（期待的顺序是从星期一到星期日）。特别是使用barplot生成柱状图时，如果不按顺序，那肯定是不行的。</p>\n<h3 id=\"解决\">解决</h3>\n<figure class=\"highlight R\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">CaiSortByFields &lt;- <span class=\"keyword\">function</span>(p.arr, p.fields) {</div><div class=\"line\">  <span class=\"comment\"># 把数组按照指定顺序输出</span></div><div class=\"line\">  <span class=\"comment\"># </span></div><div class=\"line\">  <span class=\"comment\"># Args：</span></div><div class=\"line\">  <span class=\"comment\">#   p.arr   数组数据</span></div><div class=\"line\">  <span class=\"comment\">#   p.fields  指定顺序</span></div><div class=\"line\">  <span class=\"comment\"># Returns：</span></div><div class=\"line\">  <span class=\"comment\">#   array</span></div><div class=\"line\">  </div><div class=\"line\">  tmp &lt;- array()</div><div class=\"line\">  <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> p.fields) {</div><div class=\"line\">    tmp[i] &lt;- p.arr[i]</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\"># 去掉缺失值</span></div><div class=\"line\">  tmp[!is.na(tmp)]</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这个方式比较曲折，应该有更直接的方式的。</p>\n","source":"_posts/R/R对数组指定下标顺序输出.md","raw":"title: \"R对数组指定下标顺序输出\"\ndate: 2014/2/11\ntags: \n- R\n- 经验\n\n---\n\n### 问题\n\n```R\n> table(week.data['星期'])\n\n星期二 星期六 星期日 星期三 星期四 星期五 星期一 \n    34     46     37     55     40     46     65 \n```\n\ntable函数可以统计各个值的频度，但是输出的顺序却不是我们所期待的（期待的顺序是从星期一到星期日）。特别是使用barplot生成柱状图时，如果不按顺序，那肯定是不行的。\n\n### 解决\n\n```R\nCaiSortByFields <- function(p.arr, p.fields) {\n  # 把数组按照指定顺序输出\n  # \n  # Args：\n  #   p.arr   数组数据\n  #   p.fields  指定顺序\n  # Returns：\n  #   array\n  \n  tmp <- array()\n  for (i in p.fields) {\n    tmp[i] <- p.arr[i]\n  }\n  \n  # 去掉缺失值\n  tmp[!is.na(tmp)]\n}\n```\n\n这个方式比较曲折，应该有更直接的方式的。\n","slug":"R/R对数组指定下标顺序输出","updated":1411873728000,"excerpt":"","_id":"dquknmor81hfcm6y","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"jquery的promise模式","tags":["1vifax41bhvpkjee","ohsw6wmo2d5vek1z","q4b1fnhod78fty5k","hsv8edacbu9h5xra"],"date":1411905685000,"categories":["bre7hyxaoyppdbph"],"content":"<h2 id=\"Promise\">Promise</h2>\n<p>典型的ajax调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax({</div><div class=\"line\">    url:     <span class=\"string\">'/url'</span>,</div><div class=\"line\">    success: successFunction,</div><div class=\"line\">    error:   errorFunction</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>这个实现没有问题，但是耦合性比较高，不够优美，用promise实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax({url: <span class=\"string\">'/url'</span>})</div><div class=\"line\">.done(successFunction)</div><div class=\"line\">.done(successFunction2)</div><div class=\"line\">.fail(errorFunction);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 更通用的方式</span></div><div class=\"line\"></div><div class=\"line\">$.when(ajax({url: <span class=\"string\">'/url'</span>}))     <span class=\"comment\">// $.when(promise)</span></div><div class=\"line\">.done(successFunction)</div><div class=\"line\">.fail(errorFunction);</div></pre></td></tr></table></figure>\n\n<p>好处如下：</p>\n<ul>\n<li>你可以多次调用done()和fail()函数，并使用不同的回调函数。或许你的一个回调函数用来停止动画，一个用来发起一个新的AJAX请求，一个用来将接受到的数据展示给用户。</li>\n<li>即使在AJAX调用完成之后，你依然可以调用done()和fail()函数，并且回调函数可以立即执行。不同的状态之间并不会发生变量混乱。当一个AJAX调用结束时，它保持了一个成功状态或者失败状态，这个状态不会发生改变。</li>\n</ul>\n<h2 id=\"Deferred\">Deferred</h2>\n<p>那么Deferred和Promise之间有什么区别呢？正如你在前面看到的，一个promise就是一个由异步函数返回的对象。当你想要自己编写一个这样的函数时你需要使用一个deferred。</p>\n<p>一个promise对象有done和fail两个函数，Deferred有两个与之对应的函数：resolve和reject。使用Deferred对象可以构造异步模型。如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> deferred = $.Deferred();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 异步任务（例如异步请求数据）</span></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">        deferred.resolve();</div><div class=\"line\">    }, <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>see: <a href=\"http://www.html-js.com/article/Study-JavaScript-jQuery-Deferred-and-promise-every-day\" target=\"_blank\" rel=\"external\">http://www.html-js.com/article/Study-JavaScript-jQuery-Deferred-and-promise-every-day</a> </p>\n","source":"_posts/javascript/javascript的promise模式.md","raw":"title: jquery的promise模式\ntags:\n  - javascript\n  - jquery\n  - promise\n  - 异步编程\ndate: 2014-09-28 20:01:25\ncategories: javascript\n\n---\n\n## Promise \n\n典型的ajax调用：\n\n```javascript\n$.ajax({\n    url:     '/url',\n    success: successFunction,\n    error:   errorFunction\n});  \n```\n\n这个实现没有问题，但是耦合性比较高，不够优美，用promise实现如下：\n\n```javascript\n$.ajax({url: '/url'})\n.done(successFunction)\n.done(successFunction2)\n.fail(errorFunction);\n\n// 更通用的方式\n\n$.when(ajax({url: '/url'}))     // $.when(promise)\n.done(successFunction)\n.fail(errorFunction);\n```\n\n好处如下：\n- 你可以多次调用done()和fail()函数，并使用不同的回调函数。或许你的一个回调函数用来停止动画，一个用来发起一个新的AJAX请求，一个用来将接受到的数据展示给用户。\n- 即使在AJAX调用完成之后，你依然可以调用done()和fail()函数，并且回调函数可以立即执行。不同的状态之间并不会发生变量混乱。当一个AJAX调用结束时，它保持了一个成功状态或者失败状态，这个状态不会发生改变。\n\n## Deferred \n\n那么Deferred和Promise之间有什么区别呢？正如你在前面看到的，一个promise就是一个由异步函数返回的对象。当你想要自己编写一个这样的函数时你需要使用一个deferred。\n\n一个promise对象有done和fail两个函数，Deferred有两个与之对应的函数：resolve和reject。使用Deferred对象可以构造异步模型。如：\n\n```javascript\nfunction wait() {\n    var deferred = $.Deferred();\n\n    // 异步任务（例如异步请求数据）\n    setTimeout(function(){\n        deferred.resolve();\n    }, 2000);\n\n    return deferred.promise();\n}\n```\n\nsee: http://www.html-js.com/article/Study-JavaScript-jQuery-Deferred-and-promise-every-day \n\n\n","slug":"javascript/javascript的promise模式","updated":1411958332000,"excerpt":"","_id":"c9yr6ge2nkg8q26s","comments":true,"layout":"post","photos":[],"link":""},{"title":"shell-export及执行环境","date":1411920000000,"tags":["9c5w52cmsu43bufs","4s85sjvpr3bawy4j"],"content":"<h2 id=\"export_功能说明：设置或显示环境变量。\">export 功能说明：设置或显示环境变量。</h2>\n<p>语　　法：export [-fnp] [变量名称]=[变量设置值]</p>\n<p>补充说明：</p>\n<ul>\n<li>在shell中定义的变量，通常只能在当前shell中有效，只有用export输出之后，才能在其fork的子shell中有效。</li>\n<li>子shell中的变量无法被父shell读取，即使export也不行。</li>\n</ul>\n<p>参　　数：</p>\n<ul>\n<li>-f 　代表[变量名称]中为函数名称。</li>\n<li>-n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。</li>\n<li>-p 　列出所有的shell赋予程序的环境变量。</li>\n</ul>\n<p>用法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> var</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"operator\">-f</span> func</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> -fp</div></pre></td></tr></table></figure>\n\n<h2 id=\"shell的命令类型\">shell的命令类型</h2>\n<h3 id=\"1-_内置命令(Builtin)\">1. 内置命令(Builtin)</h3>\n<p>shell 执行这些命令时不会派生新进程，而是由 shell 直接执行。比如 read, set, export 都是内置命令，这些命令需要用 help command 来查看其帮助信息。</p>\n<h3 id=\"2-_外部命令\">2. 外部命令</h3>\n<p>外部命令就是普通的可执行二进制文件，shell 在执行它们时会 fork 出新进程(这是一个子 shell)，然后用 exec 系列函数来执行它们，这时候子 shell 的环境就被命令的环境所取代。</p>\n<h3 id=\"3-_shell_脚本\">3. shell 脚本</h3>\n<p>在执行 shell 脚本时，shell 同样会先执行 fork 派生出子进程，然后使用 exec 来调用脚本解释程序(内核中会检查脚本中的第一行 #!/bin/xxx 来确定是调用哪一种)，然后将脚本装入，由它来解释执行。脚本解释器有很多，比如 bash, cshell, perl, python 等。如果被调出来的解释程序和当前 shell 是同一种 shell，那么它就是当前 shell 的子 shell，脚本中的命令都在子 shell 中执行，不会影响父 shell 的环境。</p>\n<h2 id=\"几种常见的形式\">几种常见的形式</h2>\n<h3 id=\"(_)_和_{_}_中的指令组：\">(  ) 和 {  } 中的指令组：</h3>\n<p>在 (  ) 和 {  } 中都可以内置一组指令。<br>(  ) 中的指令会在一个子 shell 中执行，命令执行结果不影响当前 shell。需要注意的是，$$ 代表当前 shell 进程的 PID，而不是子 shell 进程的 PID 。</p>\n<p>{  } 中的指令在当前 shell 中执行，指令执行结果会影响当前的环境。</p>\n<h3 id=\"后台执行和异步执行\">后台执行和异步执行</h3>\n<p>在一个 shell 脚本中将一个命令通过 &amp; 放入后台执行，这个命令和当前 shell 的执行是并行的，当前 shell 会派生一个子 shell 执行这个后台命令，而自己则继续往下执行，两者并没有相互依赖及等待的关系，所以这是一种异步的执行方式。以下代码可以说明这一点：</p>\n<h3 id=\"命令替换\">命令替换</h3>\n<p>`command` 会将 command 命令的输出结果代换到当前的命令行。command 在子 shell 中执行，它的结果不会影响到当前 shell 。比较下面代码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">pwd</span></div><div class=\"line\">dir=`<span class=\"built_in\">cd</span> /tmp; <span class=\"built_in\">pwd</span>`</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$dir</span></div><div class=\"line\"><span class=\"built_in\">pwd</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"管道\">管道</h3>\n<p>对于 bash 来说(dash，ash 等大部分 shell 也一样)， <strong>管道中的命令都是放在子shell里执行的</strong> 。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">\"hello world\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$a</span>\"</span>| (<span class=\"built_in\">read</span> var; <span class=\"built_in\">echo</span> <span class=\"string\">\"In subshell:<span class=\"variable\">$var</span>\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 管道中的命令是放在子 shell 里执行的，所以 var 得到的值无法传递到当前 shell ，所以这里要输出为空。</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"相关资料\">相关资料</h2>\n<ul>\n<li><a href=\"http://www.groad.net/bbs/thread-3699-1-1.html\" target=\"_blank\" rel=\"external\">http://www.groad.net/bbs/thread-3699-1-1.html</a></li>\n<li><a href=\"http://www.cnblogs.com/hopeworld/archive/2011/09/21/2184576.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/hopeworld/archive/2011/09/21/2184576.html</a></li>\n</ul>\n","source":"_posts/shell/shell-export及执行环境.md","raw":"title: \"shell-export及执行环境\"\ndate: 2014-9-29\ntags:\n- shell \n- export \ncategory: shell \n\n---\n\n\n## export 功能说明：设置或显示环境变量。\n\n语　　法：export \\[-fnp\\] \\[变量名称\\]=\\[变量设置值\\]\n\n补充说明：\n\n- 在shell中定义的变量，通常只能在当前shell中有效，只有用export输出之后，才能在其fork的子shell中有效。\n- 子shell中的变量无法被父shell读取，即使export也不行。\n\n参　　数：\n\n- -f 　代表\\[变量名称\\]中为函数名称。\n- -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。\n- -p 　列出所有的shell赋予程序的环境变量。\n\n用法：\n\n```\nexport var\nexport -f func\n\nexport -fp \n```\n\n## shell的命令类型 \n\n### 1. 内置命令(Builtin)\n\nshell 执行这些命令时不会派生新进程，而是由 shell 直接执行。比如 read, set, export 都是内置命令，这些命令需要用 help command 来查看其帮助信息。\n\n### 2. 外部命令\n\n外部命令就是普通的可执行二进制文件，shell 在执行它们时会 fork 出新进程(这是一个子 shell)，然后用 exec 系列函数来执行它们，这时候子 shell 的环境就被命令的环境所取代。\n\n### 3. shell 脚本\n\n在执行 shell 脚本时，shell 同样会先执行 fork 派生出子进程，然后使用 exec 来调用脚本解释程序(内核中会检查脚本中的第一行 #!/bin/xxx 来确定是调用哪一种)，然后将脚本装入，由它来解释执行。脚本解释器有很多，比如 bash, cshell, perl, python 等。如果被调出来的解释程序和当前 shell 是同一种 shell，那么它就是当前 shell 的子 shell，脚本中的命令都在子 shell 中执行，不会影响父 shell 的环境。\n\n## 几种常见的形式 \n\n### (  ) 和 {  } 中的指令组：\n\n在 (  ) 和 {  } 中都可以内置一组指令。\n(  ) 中的指令会在一个子 shell 中执行，命令执行结果不影响当前 shell。需要注意的是，$$ 代表当前 shell 进程的 PID，而不是子 shell 进程的 PID 。\n\n{  } 中的指令在当前 shell 中执行，指令执行结果会影响当前的环境。\n\n### 后台执行和异步执行\n\n在一个 shell 脚本中将一个命令通过 & 放入后台执行，这个命令和当前 shell 的执行是并行的，当前 shell 会派生一个子 shell 执行这个后台命令，而自己则继续往下执行，两者并没有相互依赖及等待的关系，所以这是一种异步的执行方式。以下代码可以说明这一点：\n\n### 命令替换\n\n\\`command\\` 会将 command 命令的输出结果代换到当前的命令行。command 在子 shell 中执行，它的结果不会影响到当前 shell 。比较下面代码：\n\n```\npwd\ndir=`cd /tmp; pwd`\necho $dir\npwd\n```\n\n### 管道\n\n对于 bash 来说\\(dash，ash 等大部分 shell 也一样\\)， **管道中的命令都是放在子shell里执行的** 。\n\n```\na=\"hello world\"\n\necho \"$a\"| (read var; echo \"In subshell:$var\")\n\n# 管道中的命令是放在子 shell 里执行的，所以 var 得到的值无法传递到当前 shell ，所以这里要输出为空。\necho $var\n```\n\n## 相关资料\n\n- http://www.groad.net/bbs/thread-3699-1-1.html\n- http://www.cnblogs.com/hopeworld/archive/2011/09/21/2184576.html\n\n","slug":"shell/shell-export及执行环境","updated":1411958332000,"categories":["dv2ergd6wevfqlw0"],"excerpt":"","_id":"z8bs0pniypbmhqgo","comments":true,"layout":"post","photos":[],"link":""},{"title":"Greasemonkey脚本开发","tags":["wk9qo4n7sgu6h2pu","1vifax41bhvpkjee"],"date":1411739280000,"categories":[],"content":"<h2 id=\"简介\">简介</h2>\n<p>Greasemonkey，简称GM，中文俗称为“油猴子”，是Mozilla Firefox的一个附加组件。它让用户安装一些脚本使大部分HTML为主的网页于用户端直接改变得更方便易用。随着Greasemonkey脚本常驻于浏览器，每次随着目的网页打开而自动做修改，使得运行脚本的用户印象深刻地享受其固定便利性。<br>Greasemonkey可替网页加入些新功能、修正网页错误、组合来自不同网页的数据、或者数繁不及备载的其他功能。写的好的Greasemonkey脚本甚至可让其输出与被修改的页面集成得天衣无缝，像是原本网页里的一部分。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"实例：过滤新浪微博上那些烦人的信息\">实例：过滤新浪微博上那些烦人的信息</h2>\n<p>新浪微博上烦人的广告等信息非常多，甚为讨厌，作为练手，就拿他开刀了。代码很简单，不多说。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ==UserScript==</span></div><div class=\"line\"><span class=\"comment\">// @name          No Weibo Advertisements</span></div><div class=\"line\"><span class=\"comment\">// @namespace     http://cyy0523xc.github.io/</span></div><div class=\"line\"><span class=\"comment\">// @description   删除微博的广告等多余信息。基于Cao Weibo修改</span></div><div class=\"line\"><span class=\"comment\">// @include       http://www.weibo.com/*</span></div><div class=\"line\"><span class=\"comment\">// @include       http://weibo.com/*</span></div><div class=\"line\"><span class=\"comment\">// @copyright     2014, cyy0523xc@gmail.com</span></div><div class=\"line\"><span class=\"comment\">// ==/UserScript==</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// return script name</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">script_name</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"NoWeiboAd\"</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// return debug flag</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debug_flag</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function return the result of xpath query</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xpath</span><span class=\"params\">(query)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.evaluate(query, <span class=\"built_in\">document</span>, <span class=\"literal\">null</span>, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, <span class=\"literal\">null</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// common function: remove nodes</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove_nodes</span><span class=\"params\">(allNode)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">var</span> remove_num = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// for each forward</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;allNode.snapshotLength; ++i)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">var</span> thisNode = allNode.snapshotItem(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (thisNode)</div><div class=\"line\">        {</div><div class=\"line\">            thisNode.parentNode.removeChild(thisNode);</div><div class=\"line\">            remove_num++;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> remove_num;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove_xpath</span><span class=\"params\">(node_path)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">var</span> remove_num = remove_nodes(xpath(node_path));</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Remove xpath = '</span> + node_path + <span class=\"string\">'    num = '</span> + remove_num);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove_ad</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"comment\">// get '&lt;div&gt;' with attribute 'feedtype=\"ad\"'</span></div><div class=\"line\">    remove_xpath(<span class=\"string\">'//div[@feedtype=\"ad\"]'</span>);</div><div class=\"line\">    </div><div class=\"line\">    remove_xpath(<span class=\"string\">'//div[@ad-data]'</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove_other</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">\t<span class=\"keyword\">var</span> id_list = [<span class=\"string\">\"trustPagelet_checkin_lotteryv5\"</span>, <span class=\"string\">\"trustPagelet_indexright_recom\"</span>, <span class=\"string\">\"pl_rightmod_ads36\"</span>, <span class=\"string\">\"trustPagelet_recom_memberv5\"</span>, <span class=\"string\">\"pl_leftnav_app\"</span> ];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> id_list) {</div><div class=\"line\">        remove_xpath(<span class=\"string\">'//div[@id=\"'</span> + id_list[i] + <span class=\"string\">'\"]'</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove_feed_spread</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"comment\">// get '&lt;div&gt;' with attribute 'node-type=\"feed_spread\"'</span></div><div class=\"line\">    remove_xpath(<span class=\"string\">'//div[@node-type=\"feed_spread\"]'</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// main function</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (debug_flag())</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Starting '</span> + script_name());</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"comment\">// remove advertisements</span></div><div class=\"line\">    remove_ad();</div><div class=\"line\">    <span class=\"comment\">// remove feed spread</span></div><div class=\"line\">    remove_feed_spread();</div><div class=\"line\">    <span class=\"comment\">// remove other</span></div><div class=\"line\">    remove_other();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/////////////////////////////////////////////////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(main, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n\n<p>代码见：<a href=\"https://github.com/cyy0523xc/code/raw/master/greasemonkey/no_weibo_ad.user.js\" target=\"_blank\" rel=\"external\">https://github.com/cyy0523xc/code/raw/master/greasemonkey/no_weibo_ad.user.js</a></p>\n","source":"_posts/javascript/Greasemonkey脚本开发.md","raw":"title: Greasemonkey脚本开发\ntags:\n  - Greasemonkey\n  - javascript\ndate: 2014-09-26 21:48:00\ncategories:\n\n---\n\n## 简介\n\nGreasemonkey，简称GM，中文俗称为“油猴子”，是Mozilla Firefox的一个附加组件。它让用户安装一些脚本使大部分HTML为主的网页于用户端直接改变得更方便易用。随着Greasemonkey脚本常驻于浏览器，每次随着目的网页打开而自动做修改，使得运行脚本的用户印象深刻地享受其固定便利性。\nGreasemonkey可替网页加入些新功能、修正网页错误、组合来自不同网页的数据、或者数繁不及备载的其他功能。写的好的Greasemonkey脚本甚至可让其输出与被修改的页面集成得天衣无缝，像是原本网页里的一部分。\n\n<!--more-->\n\n## 实例：过滤新浪微博上那些烦人的信息\n\n新浪微博上烦人的广告等信息非常多，甚为讨厌，作为练手，就拿他开刀了。代码很简单，不多说。\n\n```javascript\n// ==UserScript==\n// @name          No Weibo Advertisements\n// @namespace     http://cyy0523xc.github.io/\n// @description   删除微博的广告等多余信息。基于Cao Weibo修改\n// @include       http://www.weibo.com/*\n// @include       http://weibo.com/*\n// @copyright     2014, cyy0523xc@gmail.com\n// ==/UserScript==\n\n// return script name\nfunction script_name()\n{\n    return \"NoWeiboAd\";\n}\n\n// return debug flag\nfunction debug_flag()\n{\n    return true;\n}\n\n// function return the result of xpath query\nfunction xpath(query)\n{\n    return document.evaluate(query, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);\n}\n\n// common function: remove nodes\nfunction remove_nodes(allNode)\n{\n    var remove_num = 0;\n    // for each forward\n    for (var i=0; i<allNode.snapshotLength; ++i)\n    {\n        var thisNode = allNode.snapshotItem(i);\n        if (thisNode)\n        {\n            thisNode.parentNode.removeChild(thisNode);\n            remove_num++;\n        }\n    }\n\n    return remove_num;\n}\n\nfunction remove_xpath(node_path)\n{\n    var remove_num = remove_nodes(xpath(node_path));\n    console.log('Remove xpath = ' + node_path + '    num = ' + remove_num);\n}\n\n// function\nfunction remove_ad()\n{\n    // get '<div>' with attribute 'feedtype=\"ad\"'\n    remove_xpath('//div[@feedtype=\"ad\"]');\n    \n    remove_xpath('//div[@ad-data]');\n}\n\n// \nfunction remove_other()\n{\n\tvar id_list = [\"trustPagelet_checkin_lotteryv5\", \"trustPagelet_indexright_recom\", \"pl_rightmod_ads36\", \"trustPagelet_recom_memberv5\", \"pl_leftnav_app\" ];\n    for (var i in id_list) {\n        remove_xpath('//div[@id=\"' + id_list[i] + '\"]');\n    }\n}\n\n// function\nfunction remove_feed_spread()\n{\n    // get '<div>' with attribute 'node-type=\"feed_spread\"'\n    remove_xpath('//div[@node-type=\"feed_spread\"]');\n}\n\n// main function\nfunction main()\n{\n    if (debug_flag())\n    {\n        console.log('Starting ' + script_name());\n    }\n    // remove advertisements\n    remove_ad();\n    // remove feed spread\n    remove_feed_spread();\n    // remove other\n    remove_other();\n\n    return 0;\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n\nwindow.setTimeout(main, 1000);\n```\n\n代码见：https://github.com/cyy0523xc/code/raw/master/greasemonkey/no_weibo_ad.user.js\n","slug":"javascript/Greasemonkey脚本开发","updated":1411958332000,"excerpt":"<h2 id=\"简介\">简介</h2>\n<p>Greasemonkey，简称GM，中文俗称为“油猴子”，是Mozilla Firefox的一个附加组件。它让用户安装一些脚本使大部分HTML为主的网页于用户端直接改变得更方便易用。随着Greasemonkey脚本常驻于浏览器，每次随着目的网页打开而自动做修改，使得运行脚本的用户印象深刻地享受其固定便利性。<br>Greasemonkey可替网页加入些新功能、修正网页错误、组合来自不同网页的数据、或者数繁不及备载的其他功能。写的好的Greasemonkey脚本甚至可让其输出与被修改的页面集成得天衣无缝，像是原本网页里的一部分。</p>\n","_id":"tzj7cisljvbxzjdp","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"R","_id":"87odq62tjhx83yb8","posts":["mrvqxo0oyw7e9pgz","3veql03n9wep2a9x","ltendsuepi56erb5","igwlyvw9cke2iwvp","8t0ni847r5cducro","hmrgqiknc3ysrs1j","9fj8sd0g3unmky8m","pnnsi913r2jmovlp","87sqvalp5vn05xki","dquknmor81hfcm6y"]},{"name":"tapply","_id":"nb244p6h3907avgk","posts":["igwlyvw9cke2iwvp","9fj8sd0g3unmky8m"]},{"name":"向量化运算","_id":"h3jrpf97ovb8tzjx","posts":["3veql03n9wep2a9x","ltendsuepi56erb5","igwlyvw9cke2iwvp","9fj8sd0g3unmky8m"]},{"name":"移动互联网","_id":"dz0zk0s726jhxbu7","posts":["8ri1vitacl0wl4xt"]},{"name":"广告","_id":"65k84h1sox8guq6h","posts":["8ri1vitacl0wl4xt"]},{"name":"数据挖掘","_id":"99b2it3cn1talzxr","posts":["8ri1vitacl0wl4xt"]},{"name":"linux","_id":"q55i296h4b94lla2","posts":["ykddftfv40sygeq6","mmuuv3vhkk5en3e9","i74xy3994llal21t","cyor6odt7yry363p"]},{"name":"rsync","_id":"yoyavjalgmttvr3s","posts":["ykddftfv40sygeq6"]},{"name":"scp","_id":"gsvgq19jzwawa985","posts":["ykddftfv40sygeq6"]},{"name":"DMP","_id":"fn7vlalisaa2ji7l","posts":["e6srqgesjiaj5v9r"]},{"name":"vector","_id":"0xiem69cb9n8nrq7","posts":["87sqvalp5vn05xki"]},{"name":"names","_id":"x470f00t4zl01qcr","posts":["87sqvalp5vn05xki"]},{"name":"sed","_id":"2745h8v4m70nprvz","posts":["mmuuv3vhkk5en3e9"]},{"name":"经验","_id":"9fbpbfydl3zthopy","posts":["my08yl1pg8d4r4f4","mrvqxo0oyw7e9pgz","dquknmor81hfcm6y"]},{"name":"大数据","_id":"nrwb0x0gwf2np2m0","posts":["odou1lf489x2738y"]},{"name":"创业","_id":"06e5o2nu6ah5sg8f","posts":["odou1lf489x2738y"]},{"name":"融资","_id":"vnylwi4v1mi86k18","posts":["odou1lf489x2738y"]},{"name":"ElasticSearch","_id":"m35ibk2rjli2coo9","posts":["my08yl1pg8d4r4f4"]},{"name":"vim","_id":"t73iw1pw9oyxq70c","posts":["zidfpcdzj5ox3w0u","i74xy3994llal21t","cyor6odt7yry363p","buwyf1mm4zo8z87c","tp3w9bqwaitptbka","ks5nsijnp2wdf3gd"]},{"name":"hexo","_id":"fu4rjamvpcrvggee","posts":["1aoi1lvf95he3744"]},{"name":"性能优化","_id":"bhntdczjvhsdvypb","posts":["9fj8sd0g3unmky8m"]},{"name":"apply","_id":"w2q9hylokv50b0nz","posts":["3veql03n9wep2a9x"]},{"name":"lapply","_id":"iywvcer66x0m6a7f","posts":["ltendsuepi56erb5"]},{"name":"test","_id":"70izfkytzr1y8ai4","posts":[]},{"name":"shell","_id":"9c5w52cmsu43bufs","posts":["5t904yrk4dpdffkm","l2xjfk9rjtu1twpt","z8bs0pniypbmhqgo"]},{"name":"PHP","_id":"xscyqp84sjafy5s7","posts":["xvfkyqmps2e5uyit"]},{"name":"AOP","_id":"3siv6yohtv1v7i0k","posts":["xvfkyqmps2e5uyit"]},{"name":"失控","_id":"uknhqb0xrvy60dax","posts":["154w8ipzali2w6nb"]},{"name":"读书笔记","_id":"ad2xmo1vikdcnef7","posts":["154w8ipzali2w6nb"]},{"name":"vimscript","_id":"wk5l56hnmsbewnu5","posts":["ks5nsijnp2wdf3gd"]},{"name":"Greasemonkey","_id":"wk9qo4n7sgu6h2pu","posts":["tzj7cisljvbxzjdp"]},{"name":"javascript","_id":"1vifax41bhvpkjee","posts":["c9yr6ge2nkg8q26s","tzj7cisljvbxzjdp"]},{"name":"jquery","_id":"ohsw6wmo2d5vek1z","posts":["c9yr6ge2nkg8q26s"]},{"name":"promise","_id":"q4b1fnhod78fty5k","posts":["c9yr6ge2nkg8q26s"]},{"name":"异步编程","_id":"hsv8edacbu9h5xra","posts":["c9yr6ge2nkg8q26s"]},{"name":"export","_id":"4s85sjvpr3bawy4j","posts":["z8bs0pniypbmhqgo"]}]}